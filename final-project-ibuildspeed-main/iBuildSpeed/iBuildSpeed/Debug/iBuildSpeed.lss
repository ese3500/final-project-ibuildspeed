
iBuildSpeed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000014a2  00001536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080013a  0080013a  00001570  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001292  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e47  00000000  00000000  000029ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb4  00000000  00000000  00003815  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  000043cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bd  00000000  00000000  00004670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000589  00000000  00000000  00004d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_10>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b4:	07 63       	ori	r16, 0x37	; 55
      b6:	42 36       	cpi	r20, 0x62	; 98
      b8:	b7 9b       	sbis	0x16, 7	; 22
      ba:	d8 a7       	std	Y+40, r29	; 0x28
      bc:	1a 39       	cpi	r17, 0x9A	; 154
      be:	68 56       	subi	r22, 0x68	; 104
      c0:	18 ae       	std	Y+56, r1	; 0x38
      c2:	ba ab       	std	Y+50, r27	; 0x32
      c4:	55 8c       	ldd	r5, Z+29	; 0x1d
      c6:	1d 3c       	cpi	r17, 0xCD	; 205
      c8:	b7 cc       	rjmp	.-1682   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
      ca:	57 63       	ori	r21, 0x37	; 55
      cc:	bd 6d       	ori	r27, 0xDD	; 221
      ce:	ed fd       	.word	0xfded	; ????
      d0:	75 3e       	cpi	r23, 0xE5	; 229
      d2:	f6 17       	cp	r31, r22
      d4:	72 31       	cpi	r23, 0x12	; 18
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e2 ea       	ldi	r30, 0xA2	; 162
      f0:	f4 e1       	ldi	r31, 0x14	; 20
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	aa 33       	cpi	r26, 0x3A	; 58
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	aa e3       	ldi	r26, 0x3A	; 58
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ab 35       	cpi	r26, 0x5B	; 91
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 89 02 	call	0x512	; 0x512 <main>
     112:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <Initialize_ultrasonic>:
volatile int start = 0;
volatile int end = 0;

void
Initialize_ultrasonic() {
    cli();
     11a:	f8 94       	cli

    // sets the ouptut pin
    DDRB |= (1 << DDB1);
     11c:	84 b1       	in	r24, 0x04	; 4
     11e:	82 60       	ori	r24, 0x02	; 2
     120:	84 b9       	out	0x04, r24	; 4

    // initialize PB1 as LOW
    PORTB &= ~(1 << PORTB1);
     122:	85 b1       	in	r24, 0x05	; 5
     124:	8d 7f       	andi	r24, 0xFD	; 253
     126:	85 b9       	out	0x05, r24	; 5

    // sets output to  lights
    DDRB |= (1 << DDB2);
     128:	84 b1       	in	r24, 0x04	; 4
     12a:	84 60       	ori	r24, 0x04	; 4
     12c:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(1 << PORTB2);
     12e:	85 b1       	in	r24, 0x05	; 5
     130:	8b 7f       	andi	r24, 0xFB	; 251
     132:	85 b9       	out	0x05, r24	; 5

    DDRB |= (1 << DDRB3);
     134:	84 b1       	in	r24, 0x04	; 4
     136:	88 60       	ori	r24, 0x08	; 8
     138:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << DDD3);
     13a:	8a b1       	in	r24, 0x0a	; 10
     13c:	88 60       	ori	r24, 0x08	; 8
     13e:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1 << PORTD7);
     140:	8b b1       	in	r24, 0x0b	; 11
     142:	8f 77       	andi	r24, 0x7F	; 127
     144:	8b b9       	out	0x0b, r24	; 11

    // sets the input pin - echo
    DDRB &= ~(1 << DDB0);
     146:	84 b1       	in	r24, 0x04	; 4
     148:	8e 7f       	andi	r24, 0xFE	; 254
     14a:	84 b9       	out	0x04, r24	; 4

    // prescale clock by 256
    TCCR1B &= ~(1 << CS10);
     14c:	e1 e8       	ldi	r30, 0x81	; 129
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	8e 7f       	andi	r24, 0xFE	; 254
     154:	80 83       	st	Z, r24
    TCCR1B &= ~(1 << CS11);
     156:	80 81       	ld	r24, Z
     158:	8d 7f       	andi	r24, 0xFD	; 253
     15a:	80 83       	st	Z, r24
    TCCR1B |= (1 << CS12);
     15c:	80 81       	ld	r24, Z
     15e:	84 60       	ori	r24, 0x04	; 4
     160:	80 83       	st	Z, r24

    // sets the clock to normal mode
    TCCR1A &= ~(1 << WGM10);
     162:	a0 e8       	ldi	r26, 0x80	; 128
     164:	b0 e0       	ldi	r27, 0x00	; 0
     166:	8c 91       	ld	r24, X
     168:	8e 7f       	andi	r24, 0xFE	; 254
     16a:	8c 93       	st	X, r24
    TCCR1A &= ~(1 << WGM11);
     16c:	8c 91       	ld	r24, X
     16e:	8d 7f       	andi	r24, 0xFD	; 253
     170:	8c 93       	st	X, r24
    TCCR1B &= ~(1 << WGM12);
     172:	80 81       	ld	r24, Z
     174:	87 7f       	andi	r24, 0xF7	; 247
     176:	80 83       	st	Z, r24
    TCCR1B &= ~(1 << WGM13);
     178:	80 81       	ld	r24, Z
     17a:	8f 7e       	andi	r24, 0xEF	; 239
     17c:	80 83       	st	Z, r24

    // rising edge detection
    TCCR1B |= (1 << ICES1);
     17e:	80 81       	ld	r24, Z
     180:	80 64       	ori	r24, 0x40	; 64
     182:	80 83       	st	Z, r24

    // clears input capture flag
    TIFR1 |= (1 << ICF1);
     184:	86 b3       	in	r24, 0x16	; 22
     186:	80 62       	ori	r24, 0x20	; 32
     188:	86 bb       	out	0x16, r24	; 22

    // enables input capture
    TIMSK1 |= (1 << ICIE1);
     18a:	ef e6       	ldi	r30, 0x6F	; 111
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	80 62       	ori	r24, 0x20	; 32
     192:	80 83       	st	Z, r24

    // sets timer2 to fast pwm
    TCCR2A |= (1 << WGM20);
     194:	e0 eb       	ldi	r30, 0xB0	; 176
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	81 60       	ori	r24, 0x01	; 1
     19c:	80 83       	st	Z, r24
    TCCR2A |= (1 << WGM21);
     19e:	80 81       	ld	r24, Z
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	80 83       	st	Z, r24
    TCCR2B &= ~(1 << WGM22);
     1a4:	a1 eb       	ldi	r26, 0xB1	; 177
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	8c 91       	ld	r24, X
     1aa:	87 7f       	andi	r24, 0xF7	; 247
     1ac:	8c 93       	st	X, r24

    // prescale timer2 by 256
    TCCR2B &= ~(1 << CS20);
     1ae:	8c 91       	ld	r24, X
     1b0:	8e 7f       	andi	r24, 0xFE	; 254
     1b2:	8c 93       	st	X, r24
    TCCR2B |= (1 << CS21);
     1b4:	8c 91       	ld	r24, X
     1b6:	82 60       	ori	r24, 0x02	; 2
     1b8:	8c 93       	st	X, r24
    TCCR2B |= (1 << CS22);
     1ba:	8c 91       	ld	r24, X
     1bc:	84 60       	ori	r24, 0x04	; 4
     1be:	8c 93       	st	X, r24

    TCCR2A &= ~(1 << COM2A1);
     1c0:	80 81       	ld	r24, Z
     1c2:	8f 77       	andi	r24, 0x7F	; 127
     1c4:	80 83       	st	Z, r24
    TCCR2A |= (1 << COM2A0);
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	80 83       	st	Z, r24

    TCCR2A |= (1 << COM2B1);
     1cc:	80 81       	ld	r24, Z
     1ce:	80 62       	ori	r24, 0x20	; 32
     1d0:	80 83       	st	Z, r24

    OCR2A = 200;
     1d2:	88 ec       	ldi	r24, 0xC8	; 200
     1d4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

    sei();
     1d8:	78 94       	sei
     1da:	08 95       	ret

000001dc <send_trigger>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	87 e9       	ldi	r24, 0x97	; 151
     1de:	9a e3       	ldi	r25, 0x3A	; 58
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <send_trigger+0x4>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <send_trigger+0xa>
     1e6:	00 00       	nop
}
void
send_trigger() {
    _delay_ms(60);
    PORTB |= (1 << PORTB1);
     1e8:	85 b1       	in	r24, 0x05	; 5
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ee:	93 e0       	ldi	r25, 0x03	; 3
     1f0:	9a 95       	dec	r25
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <send_trigger+0x14>
     1f4:	00 00       	nop
    _delay_us(10);
    PORTB &= ~(1 << PORTB1);
     1f6:	85 b1       	in	r24, 0x05	; 5
     1f8:	8d 7f       	andi	r24, 0xFD	; 253
     1fa:	85 b9       	out	0x05, r24	; 5
     1fc:	08 95       	ret

000001fe <get_distance>:
}

uint16_t
get_distance() {
    return abs((duration * 34000 * 256) / (16000000 * 2));
     1fe:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <duration>
     202:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <duration+0x1>
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 ed       	ldi	r19, 0xD0	; 208
     20a:	44 e8       	ldi	r20, 0x84	; 132
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	0e 94 21 07 	call	0xe42	; 0xe42 <__mulshisi3>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	38 e4       	ldi	r19, 0x48	; 72
     216:	48 ee       	ldi	r20, 0xE8	; 232
     218:	51 e0       	ldi	r21, 0x01	; 1
     21a:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodsi4>
     21e:	c9 01       	movw	r24, r18
     220:	99 23       	and	r25, r25
     222:	24 f4       	brge	.+8      	; 0x22c <get_distance+0x2e>
     224:	88 27       	eor	r24, r24
     226:	99 27       	eor	r25, r25
     228:	82 1b       	sub	r24, r18
     22a:	93 0b       	sbc	r25, r19
}
     22c:	08 95       	ret

0000022e <__vector_10>:

ISR(TIMER1_CAPT_vect) {
     22e:	1f 92       	push	r1
     230:	0f 92       	push	r0
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	0f 92       	push	r0
     236:	11 24       	eor	r1, r1
     238:	2f 93       	push	r18
     23a:	3f 93       	push	r19
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31

    if (TCCR1B & (1 << ICES1)) {   // if rising edge is detected
     244:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     248:	86 ff       	sbrs	r24, 6
     24a:	0b c0       	rjmp	.+22     	; 0x262 <__vector_10+0x34>
        TCNT1 = 0;
     24c:	e4 e8       	ldi	r30, 0x84	; 132
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	11 82       	std	Z+1, r1	; 0x01
     252:	10 82       	st	Z, r1
        start = TCNT1;
     254:	80 81       	ld	r24, Z
     256:	91 81       	ldd	r25, Z+1	; 0x01
     258:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <start+0x1>
     25c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <start>
     260:	31 c0       	rjmp	.+98     	; 0x2c4 <__vector_10+0x96>
    } else {
        end = TCNT1;
     262:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     266:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     26a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
     26e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
        if (end >= start) {
     272:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
     276:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
     27a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <start>
     27e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <start+0x1>
     282:	28 17       	cp	r18, r24
     284:	39 07       	cpc	r19, r25
     286:	7c f0       	brlt	.+30     	; 0x2a6 <__vector_10+0x78>
            duration = end - start;
     288:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     28c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
     290:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <start>
     294:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <start+0x1>
     298:	82 1b       	sub	r24, r18
     29a:	93 0b       	sbc	r25, r19
     29c:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <duration+0x1>
     2a0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <duration>
     2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <__vector_10+0x96>
        } else {
            duration = end - start + 65535;   // 2^16 = 65536 = no. of ticks before overflow
     2a6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     2aa:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
     2ae:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <start>
     2b2:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <start+0x1>
     2b6:	82 1b       	sub	r24, r18
     2b8:	93 0b       	sbc	r25, r19
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <duration+0x1>
     2c0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <duration>
        }
    }

    TIFR1 |= (1 << ICF1);     // Clear input capture flag
     2c4:	86 b3       	in	r24, 0x16	; 22
     2c6:	80 62       	ori	r24, 0x20	; 32
     2c8:	86 bb       	out	0x16, r24	; 22
    TCCR1B ^= (1 << ICES1);   // Toggle trigger
     2ca:	e1 e8       	ldi	r30, 0x81	; 129
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	90 81       	ld	r25, Z
     2d0:	80 e4       	ldi	r24, 0x40	; 64
     2d2:	89 27       	eor	r24, r25
     2d4:	80 83       	st	Z, r24
}
     2d6:	ff 91       	pop	r31
     2d8:	ef 91       	pop	r30
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	3f 91       	pop	r19
     2e0:	2f 91       	pop	r18
     2e2:	0f 90       	pop	r0
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	0f 90       	pop	r0
     2e8:	1f 90       	pop	r1
     2ea:	18 95       	reti

000002ec <readADC>:
#include <avr/interrupt.h>
#include <avr/io.h>
uint16_t
readADC(uint8_t ADCchannel) {
    // select ADC channel with safety mask
    ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
     2ec:	ec e7       	ldi	r30, 0x7C	; 124
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	90 81       	ld	r25, Z
     2f2:	90 7f       	andi	r25, 0xF0	; 240
     2f4:	8f 70       	andi	r24, 0x0F	; 15
     2f6:	89 2b       	or	r24, r25
     2f8:	80 83       	st	Z, r24
    // single conversion mode
    ADCSRA |= (1 << ADSC);
     2fa:	ea e7       	ldi	r30, 0x7A	; 122
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	80 64       	ori	r24, 0x40	; 64
     302:	80 83       	st	Z, r24
    // wait until ADC conversion is complete
    while (ADCSRA & (1 << ADSC)) {
     304:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     308:	86 fd       	sbrc	r24, 6
     30a:	fc cf       	rjmp	.-8      	; 0x304 <readADC+0x18>
    }
    return ADC;
     30c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     310:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     314:	08 95       	ret

00000316 <Initialize_ADC>:

void
Initialize_ADC() {
    cli();
     316:	f8 94       	cli
    // clear power reduction for ADC
    PRR0 &= ~(1 << PRADC);
     318:	e4 e6       	ldi	r30, 0x64	; 100
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	8e 7f       	andi	r24, 0xFE	; 254
     320:	80 83       	st	Z, r24

    // select vref = AVcc
    ADMUX |= (1 << REFS0);
     322:	ec e7       	ldi	r30, 0x7C	; 124
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	80 64       	ori	r24, 0x40	; 64
     32a:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
     32c:	80 81       	ld	r24, Z
     32e:	8f 77       	andi	r24, 0x7F	; 127
     330:	80 83       	st	Z, r24

    // set ADC clock to have prescale of 128
    ADCSRA |= (1 << ADPS0);
     332:	ea e7       	ldi	r30, 0x7A	; 122
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	81 60       	ori	r24, 0x01	; 1
     33a:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
     33c:	80 81       	ld	r24, Z
     33e:	82 60       	ori	r24, 0x02	; 2
     340:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS2);
     342:	80 81       	ld	r24, Z
     344:	84 60       	ori	r24, 0x04	; 4
     346:	80 83       	st	Z, r24

    // autotrigger off
    ADCSRA &= ~(1 << ADATE);
     348:	80 81       	ld	r24, Z
     34a:	8f 7d       	andi	r24, 0xDF	; 223
     34c:	80 83       	st	Z, r24

    // disable digital input buffer
    DIDR0 |= (ADC0D);
     34e:	ae e7       	ldi	r26, 0x7E	; 126
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	8c 91       	ld	r24, X
     354:	8c 93       	st	X, r24

    // enable ADC
    ADCSRA |= (1 << ADEN);
     356:	80 81       	ld	r24, Z
     358:	80 68       	ori	r24, 0x80	; 128
     35a:	80 83       	st	Z, r24
    sei();
     35c:	78 94       	sei
     35e:	08 95       	ret

00000360 <Initialize_light_PWM>:
#include <avr/io.h>
#include <stdio.h>
#include <stdlib.h>
void
Initialize_light_PWM() {
    cli();
     360:	f8 94       	cli

    // sets the ouptut pin
    DDRD |= (1 << DDD5);
     362:	8a b1       	in	r24, 0x0a	; 10
     364:	80 62       	ori	r24, 0x20	; 32
     366:	8a b9       	out	0x0a, r24	; 10

    // prescale clock by 1024
    TCCR0B |= (1 << CS00);
     368:	85 b5       	in	r24, 0x25	; 37
     36a:	81 60       	ori	r24, 0x01	; 1
     36c:	85 bd       	out	0x25, r24	; 37
    TCCR0B &= ~(1 << CS01);
     36e:	85 b5       	in	r24, 0x25	; 37
     370:	8d 7f       	andi	r24, 0xFD	; 253
     372:	85 bd       	out	0x25, r24	; 37
    TCCR0B |= (1 << CS02);
     374:	85 b5       	in	r24, 0x25	; 37
     376:	84 60       	ori	r24, 0x04	; 4
     378:	85 bd       	out	0x25, r24	; 37

    // sets the clock to PWM mode
    TCCR0A |= (1 << WGM00);
     37a:	84 b5       	in	r24, 0x24	; 36
     37c:	81 60       	ori	r24, 0x01	; 1
     37e:	84 bd       	out	0x24, r24	; 36
    TCCR0A |= (1 << WGM01);
     380:	84 b5       	in	r24, 0x24	; 36
     382:	82 60       	ori	r24, 0x02	; 2
     384:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << WGM02);
     386:	85 b5       	in	r24, 0x25	; 37
     388:	88 60       	ori	r24, 0x08	; 8
     38a:	85 bd       	out	0x25, r24	; 37

    // clears input capture flag
    TIFR1 |= (1 << ICF1);
     38c:	86 b3       	in	r24, 0x16	; 22
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	86 bb       	out	0x16, r24	; 22

    // 	enables compare match
    TCCR0A &= ~(1 << COM0A1);
     392:	84 b5       	in	r24, 0x24	; 36
     394:	8f 77       	andi	r24, 0x7F	; 127
     396:	84 bd       	out	0x24, r24	; 36
    TCCR0A |= (1 << COM0A0);
     398:	84 b5       	in	r24, 0x24	; 36
     39a:	80 64       	ori	r24, 0x40	; 64
     39c:	84 bd       	out	0x24, r24	; 36

    TCCR0A |= (1 << COM0B1);
     39e:	84 b5       	in	r24, 0x24	; 36
     3a0:	80 62       	ori	r24, 0x20	; 32
     3a2:	84 bd       	out	0x24, r24	; 36
    OCR0A = 255;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	87 bd       	out	0x27, r24	; 39

    sei();
     3a8:	78 94       	sei
     3aa:	08 95       	ret

000003ac <lights>:
}

uint16_t
lights() {
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
    uint16_t currADC = readADC(0);
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 76 01 	call	0x2ec	; 0x2ec <readADC>
     3b6:	ec 01       	movw	r28, r24
    if (currADC < 300 && currADC > 200) {   // low brightness
     3b8:	89 5c       	subi	r24, 0xC9	; 201
     3ba:	91 09       	sbc	r25, r1
     3bc:	83 36       	cpi	r24, 0x63	; 99
     3be:	91 05       	cpc	r25, r1
     3c0:	90 f4       	brcc	.+36     	; 0x3e6 <lights+0x3a>
        OCR2B = OCR2A * 1.0 / 3.0;
     3c2:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e4       	ldi	r20, 0x40	; 64
     3d6:	50 e4       	ldi	r21, 0x40	; 64
     3d8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     3dc:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
     3e0:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3e4:	26 c0       	rjmp	.+76     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
    } else if (currADC < 200 && currADC > 100) {   // medium brightness
     3e6:	ce 01       	movw	r24, r28
     3e8:	85 56       	subi	r24, 0x65	; 101
     3ea:	91 09       	sbc	r25, r1
     3ec:	83 36       	cpi	r24, 0x63	; 99
     3ee:	91 05       	cpc	r25, r1
     3f0:	b0 f4       	brcc	.+44     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
        OCR2B = OCR2A * 2.0 / 3.0;
     3f2:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     400:	9b 01       	movw	r18, r22
     402:	ac 01       	movw	r20, r24
     404:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__addsf3>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e4       	ldi	r20, 0x40	; 64
     40e:	50 e4       	ldi	r21, 0x40	; 64
     410:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     414:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
     418:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     41c:	0a c0       	rjmp	.+20     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
    } else if (currADC < 100) {   // high brightness
     41e:	c4 36       	cpi	r28, 0x64	; 100
     420:	d1 05       	cpc	r29, r1
     422:	28 f4       	brcc	.+10     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
        OCR2B = OCR2A;
     424:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     428:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
    } else {   // off
        OCR2B = 0;
     42e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    }
	return currADC;
     432:	ce 01       	movw	r24, r28
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <drive>:

int currADC = 0;
double duty = 0;

void
drive() {
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
    distance = get_distance();
     446:	0e 94 ff 00 	call	0x1fe	; 0x1fe <get_distance>
     44a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <distance+0x1>
     44e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <distance>
	
	if (distance < 20) {
     452:	44 97       	sbiw	r24, 0x14	; 20
     454:	1c f4       	brge	.+6      	; 0x45c <drive+0x22>
		e_brake();
     456:	0e 94 8b 03 	call	0x716	; 0x716 <e_brake>
     45a:	49 c0       	rjmp	.+146    	; 0x4ee <drive+0xb4>
	} else {
//     sprintf(String, "distance: %d \n", distance);
//     UART_putstring(String);

    // read the throttle value
    uint16_t acc_value = readADC(1);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 76 01 	call	0x2ec	; 0x2ec <readADC>
     462:	7c 01       	movw	r14, r24
     sprintf(String, "VROOOMM: %d \n", acc_value);
     464:	ff 92       	push	r15
     466:	8f 93       	push	r24
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	02 e4       	ldi	r16, 0x42	; 66
     472:	11 e0       	ldi	r17, 0x01	; 1
     474:	1f 93       	push	r17
     476:	0f 93       	push	r16
     478:	0e 94 65 07 	call	0xeca	; 0xeca <sprintf>
     UART_putstring(String);
     47c:	c8 01       	movw	r24, r16
     47e:	0e 94 de 03 	call	0x7bc	; 0x7bc <UART_putstring>

    uint16_t brake_value = readADC(2);
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	0e 94 76 01 	call	0x2ec	; 0x2ec <readADC>
     488:	ec 01       	movw	r28, r24
    sprintf(String, "STOPPP: %d \n", brake_value);
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	8e e0       	ldi	r24, 0x0E	; 14
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	1f 93       	push	r17
     498:	0f 93       	push	r16
     49a:	0e 94 65 07 	call	0xeca	; 0xeca <sprintf>
     UART_putstring(String);
     49e:	c8 01       	movw	r24, r16
     4a0:	0e 94 de 03 	call	0x7bc	; 0x7bc <UART_putstring>

    if (brake_value < 10  || acc_value < 10) {
     4a4:	8d b7       	in	r24, 0x3d	; 61
     4a6:	9e b7       	in	r25, 0x3e	; 62
     4a8:	0c 96       	adiw	r24, 0x0c	; 12
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	9e bf       	out	0x3e, r25	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	8d bf       	out	0x3d, r24	; 61
     4b4:	ca 30       	cpi	r28, 0x0A	; 10
     4b6:	d1 05       	cpc	r29, r1
     4b8:	20 f0       	brcs	.+8      	; 0x4c2 <drive+0x88>
     4ba:	9a e0       	ldi	r25, 0x0A	; 10
     4bc:	e9 16       	cp	r14, r25
     4be:	f1 04       	cpc	r15, r1
     4c0:	10 f4       	brcc	.+4      	; 0x4c6 <drive+0x8c>
        neutral();
     4c2:	0e 94 b2 03 	call	0x764	; 0x764 <neutral>
    }

    if (brake_value > 10) {
     4c6:	cb 30       	cpi	r28, 0x0B	; 11
     4c8:	d1 05       	cpc	r29, r1
     4ca:	38 f0       	brcs	.+14     	; 0x4da <drive+0xa0>
        // both are being pressed --> we want to brake
        OCR0B = set_brake(brake_value);
     4cc:	ce 01       	movw	r24, r28
     4ce:	0e 94 49 03 	call	0x692	; 0x692 <set_brake>
     4d2:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
     4d6:	68 bd       	out	0x28, r22	; 40
     4d8:	0a c0       	rjmp	.+20     	; 0x4ee <drive+0xb4>
// 		brake_lights();
    } else if (acc_value > 10) {
     4da:	8b e0       	ldi	r24, 0x0B	; 11
     4dc:	e8 16       	cp	r14, r24
     4de:	f1 04       	cpc	r15, r1
     4e0:	30 f0       	brcs	.+12     	; 0x4ee <drive+0xb4>
        OCR0B = set_throttle(acc_value);
     4e2:	c7 01       	movw	r24, r14
     4e4:	0e 94 1d 03 	call	0x63a	; 0x63a <set_throttle>
     4e8:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
     4ec:	68 bd       	out	0x28, r22	; 40
    //     } else {
    //         highSpeed();
    //     }
    // }
	}
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	08 95       	ret

000004fc <Initialize>:
// 9.1 -> neutral
// 6.1 -> min
// 12.1 -> max
void
Initialize() {
    cli();
     4fc:	f8 94       	cli
    Initialize_ultrasonic();
     4fe:	0e 94 8d 00 	call	0x11a	; 0x11a <Initialize_ultrasonic>
    Initialize_throttle();
     502:	0e 94 d6 02 	call	0x5ac	; 0x5ac <Initialize_throttle>
    Initialize_light_PWM();
     506:	0e 94 b0 01 	call	0x360	; 0x360 <Initialize_light_PWM>
    Initialize_ADC();
     50a:	0e 94 8b 01 	call	0x316	; 0x316 <Initialize_ADC>
    sei();
     50e:	78 94       	sei
     510:	08 95       	ret

00000512 <main>:
}

int
main(void) {

    UART_init(BAUD_PRESCALER);
     512:	87 e6       	ldi	r24, 0x67	; 103
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 c8 03 	call	0x790	; 0x790 <UART_init>
    Initialize();
     51a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <Initialize>
    neutral();
     51e:	0e 94 b2 03 	call	0x764	; 0x764 <neutral>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	2a ea       	ldi	r18, 0xAA	; 170
     524:	36 ee       	ldi	r19, 0xE6	; 230
     526:	86 e9       	ldi	r24, 0x96	; 150
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	30 40       	sbci	r19, 0x00	; 0
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	90 40       	sbci	r25, 0x00	; 0
     532:	d9 f7       	brne	.-10     	; 0x52a <main+0x18>
     534:	00 00       	nop
    _delay_ms(10000);
    while (1) {
        uint16_t light = lights();
     536:	0e 94 d6 01 	call	0x3ac	; 0x3ac <lights>
		sprintf(String, "light ADC: %d \n", light);
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	8b e1       	ldi	r24, 0x1B	; 27
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	c2 e4       	ldi	r28, 0x42	; 66
     548:	d1 e0       	ldi	r29, 0x01	; 1
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	0e 94 65 07 	call	0xeca	; 0xeca <sprintf>
		UART_putstring(String);
     552:	ce 01       	movw	r24, r28
     554:	0e 94 de 03 	call	0x7bc	; 0x7bc <UART_putstring>
        drive();
     558:	0e 94 1d 02 	call	0x43a	; 0x43a <drive>
		brake_lights();
     55c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <brake_lights>
        send_trigger();
     560:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_trigger>
        sprintf(String, "distance: %d \n", distance);
     564:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <distance+0x1>
     568:	8f 93       	push	r24
     56a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <distance>
     56e:	8f 93       	push	r24
     570:	8b e2       	ldi	r24, 0x2B	; 43
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	0e 94 65 07 	call	0xeca	; 0xeca <sprintf>
        UART_putstring(String);
     580:	ce 01       	movw	r24, r28
     582:	0e 94 de 03 	call	0x7bc	; 0x7bc <UART_putstring>
     586:	2f ef       	ldi	r18, 0xFF	; 255
     588:	31 ee       	ldi	r19, 0xE1	; 225
     58a:	84 e0       	ldi	r24, 0x04	; 4
     58c:	21 50       	subi	r18, 0x01	; 1
     58e:	30 40       	sbci	r19, 0x00	; 0
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <main+0x7a>
     594:	00 c0       	rjmp	.+0      	; 0x596 <main+0x84>
     596:	00 00       	nop
     598:	2d b7       	in	r18, 0x3d	; 61
     59a:	3e b7       	in	r19, 0x3e	; 62
     59c:	24 5f       	subi	r18, 0xF4	; 244
     59e:	3f 4f       	sbci	r19, 0xFF	; 255
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	3e bf       	out	0x3e, r19	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	2d bf       	out	0x3d, r18	; 61
     5aa:	c5 cf       	rjmp	.-118    	; 0x536 <main+0x24>

000005ac <Initialize_throttle>:
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
void
Initialize_throttle() {
    cli();
     5ac:	f8 94       	cli
    // input pins
    DDRC &= ~(1 << DDRC1);
     5ae:	87 b1       	in	r24, 0x07	; 7
     5b0:	8d 7f       	andi	r24, 0xFD	; 253
     5b2:	87 b9       	out	0x07, r24	; 7
    DDRC &= ~(1 << DDRC2);
     5b4:	87 b1       	in	r24, 0x07	; 7
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
     5b8:	87 b9       	out	0x07, r24	; 7

	//sets output pin for brake lights and initializes as off
	DDRB |= (1<<DDB5);
     5ba:	84 b1       	in	r24, 0x04	; 4
     5bc:	80 62       	ori	r24, 0x20	; 32
     5be:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB5);
     5c0:	85 b1       	in	r24, 0x05	; 5
     5c2:	8f 7d       	andi	r24, 0xDF	; 223
     5c4:	85 b9       	out	0x05, r24	; 5
	
	//output for buzzer
	DDRD |= (1 << DDRD7); 
     5c6:	8a b1       	in	r24, 0x0a	; 10
     5c8:	80 68       	ori	r24, 0x80	; 128
     5ca:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << PORTD7); 
     5cc:	8b b1       	in	r24, 0x0b	; 11
     5ce:	8f 77       	andi	r24, 0x7F	; 127
     5d0:	8b b9       	out	0x0b, r24	; 11
    // 0V (min) to 5V (max)
    // 0 --> 1023
    sei();
     5d2:	78 94       	sei
     5d4:	08 95       	ret

000005d6 <brake_lights>:
}

void brake_lights() {
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
	if(OCR0B < (OCR0A * 8.5 / 100)) {
     5de:	68 b5       	in	r22, 0x28	; 40
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     5ea:	6b 01       	movw	r12, r22
     5ec:	7c 01       	movw	r14, r24
     5ee:	67 b5       	in	r22, 0x27	; 39
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	48 e0       	ldi	r20, 0x08	; 8
     600:	51 e4       	ldi	r21, 0x41	; 65
     602:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	48 ec       	ldi	r20, 0xC8	; 200
     60c:	52 e4       	ldi	r21, 0x42	; 66
     60e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     612:	9b 01       	movw	r18, r22
     614:	ac 01       	movw	r20, r24
     616:	c7 01       	movw	r24, r14
     618:	b6 01       	movw	r22, r12
     61a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__cmpsf2>
     61e:	88 23       	and	r24, r24
     620:	24 f4       	brge	.+8      	; 0x62a <brake_lights+0x54>
		PORTB |= (1<<PORTB5);
     622:	85 b1       	in	r24, 0x05	; 5
     624:	80 62       	ori	r24, 0x20	; 32
     626:	85 b9       	out	0x05, r24	; 5
     628:	03 c0       	rjmp	.+6      	; 0x630 <brake_lights+0x5a>
	} else {
		PORTB &= ~(1<<PORTB5);
     62a:	85 b1       	in	r24, 0x05	; 5
     62c:	8f 7d       	andi	r24, 0xDF	; 223
     62e:	85 b9       	out	0x05, r24	; 5
	}
}
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	08 95       	ret

0000063a <set_throttle>:


double
set_throttle(uint16_t acc_value) {
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15

    // Calculate slope (change in y / change in x)
    const double slope = (end_y - start_y) / (end_x - start_x);

    // Calculate and return the output value using the linear equation
    double result = start_y + slope * (acc_value - start_x);
     642:	bc 01       	movw	r22, r24
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatunsisf>
     64c:	2c e0       	ldi	r18, 0x0C	; 12
     64e:	30 e3       	ldi	r19, 0x30	; 48
     650:	40 e4       	ldi	r20, 0x40	; 64
     652:	5b e3       	ldi	r21, 0x3B	; 59
     654:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3>
     658:	2a e9       	ldi	r18, 0x9A	; 154
     65a:	39 e9       	ldi	r19, 0x99	; 153
     65c:	41 e1       	ldi	r20, 0x11	; 17
     65e:	51 e4       	ldi	r21, 0x41	; 65
     660:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__addsf3>
     664:	6b 01       	movw	r12, r22
     666:	7c 01       	movw	r14, r24

    return (OCR0A * result / 100.0);
     668:	67 b5       	in	r22, 0x27	; 39
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     674:	a7 01       	movw	r20, r14
     676:	96 01       	movw	r18, r12
     678:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	48 ec       	ldi	r20, 0xC8	; 200
     682:	52 e4       	ldi	r21, 0x42	; 66
     684:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
}
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	08 95       	ret

00000692 <set_brake>:

double
set_brake(uint16_t brake_value) {
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
    const double U = 8.9;     // Upper asymptote
    const double k = 0.008;   // Decay rate
    const double x0 = 512;    // Midpoint

    // Logistic decay formula
    double result = L + (U - L) / (1 + exp(k * (brake_value - x0)));
     69a:	bc 01       	movw	r22, r24
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatunsisf>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	54 e4       	ldi	r21, 0x44	; 68
     6ac:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__subsf3>
     6b0:	2f e6       	ldi	r18, 0x6F	; 111
     6b2:	32 e1       	ldi	r19, 0x12	; 18
     6b4:	43 e0       	ldi	r20, 0x03	; 3
     6b6:	5c e3       	ldi	r21, 0x3C	; 60
     6b8:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3>
     6bc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <exp>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__addsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	62 e3       	ldi	r22, 0x32	; 50
     6d2:	73 e3       	ldi	r23, 0x33	; 51
     6d4:	83 e3       	ldi	r24, 0x33	; 51
     6d6:	90 e4       	ldi	r25, 0x40	; 64
     6d8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     6dc:	23 e3       	ldi	r18, 0x33	; 51
     6de:	33 e3       	ldi	r19, 0x33	; 51
     6e0:	43 ec       	ldi	r20, 0xC3	; 195
     6e2:	50 e4       	ldi	r21, 0x40	; 64
     6e4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__addsf3>
     6e8:	6b 01       	movw	r12, r22
     6ea:	7c 01       	movw	r14, r24

    return (OCR0A * result / 100.0);
     6ec:	67 b5       	in	r22, 0x27	; 39
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     6f8:	a7 01       	movw	r20, r14
     6fa:	96 01       	movw	r18, r12
     6fc:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	48 ec       	ldi	r20, 0xC8	; 200
     706:	52 e4       	ldi	r21, 0x42	; 66
     708:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
}
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	08 95       	ret

00000716 <e_brake>:

void
e_brake() {
    OCR0B = OCR0A * 6.1 / 100.0;
     716:	67 b5       	in	r22, 0x27	; 39
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     722:	23 e3       	ldi	r18, 0x33	; 51
     724:	33 e3       	ldi	r19, 0x33	; 51
     726:	43 ec       	ldi	r20, 0xC3	; 195
     728:	50 e4       	ldi	r21, 0x40	; 64
     72a:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	48 ec       	ldi	r20, 0xC8	; 200
     734:	52 e4       	ldi	r21, 0x42	; 66
     736:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     73a:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
     73e:	68 bd       	out	0x28, r22	; 40
	PORTD |= (1 << PORTD7);
     740:	8b b1       	in	r24, 0x0b	; 11
     742:	80 68       	ori	r24, 0x80	; 128
     744:	8b b9       	out	0x0b, r24	; 11
     746:	2f e3       	ldi	r18, 0x3F	; 63
     748:	82 e4       	ldi	r24, 0x42	; 66
     74a:	9f e0       	ldi	r25, 0x0F	; 15
     74c:	21 50       	subi	r18, 0x01	; 1
     74e:	80 40       	sbci	r24, 0x00	; 0
     750:	90 40       	sbci	r25, 0x00	; 0
     752:	e1 f7       	brne	.-8      	; 0x74c <e_brake+0x36>
     754:	00 c0       	rjmp	.+0      	; 0x756 <e_brake+0x40>
     756:	00 00       	nop
	_delay_ms(5000); 
	PORTD &= ~(1 << PORTD7);
     758:	8b b1       	in	r24, 0x0b	; 11
     75a:	8f 77       	andi	r24, 0x7F	; 127
     75c:	8b b9       	out	0x0b, r24	; 11
	brake_lights();
     75e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <brake_lights>
     762:	08 95       	ret

00000764 <neutral>:

}

void
neutral() {
    OCR0B = OCR0A * 9.1 / 100.0;
     764:	67 b5       	in	r22, 0x27	; 39
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatsisf>
     770:	2a e9       	ldi	r18, 0x9A	; 154
     772:	39 e9       	ldi	r19, 0x99	; 153
     774:	41 e1       	ldi	r20, 0x11	; 17
     776:	51 e4       	ldi	r21, 0x41	; 65
     778:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	48 ec       	ldi	r20, 0xC8	; 200
     782:	52 e4       	ldi	r21, 0x42	; 66
     784:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     788:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
     78c:	68 bd       	out	0x28, r22	; 40
     78e:	08 95       	ret

00000790 <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
     790:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
     794:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     798:	88 e1       	ldi	r24, 0x18	; 24
     79a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
     79e:	e2 ec       	ldi	r30, 0xC2	; 194
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	86 e0       	ldi	r24, 0x06	; 6
     7a4:	80 83       	st	Z, r24
  UCSR0C |= (1<<USBS0); // 2 stop bits
     7a6:	80 81       	ld	r24, Z
     7a8:	88 60       	ori	r24, 0x08	; 8
     7aa:	80 83       	st	Z, r24
     7ac:	08 95       	ret

000007ae <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
     7ae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     7b2:	95 ff       	sbrs	r25, 5
     7b4:	fc cf       	rjmp	.-8      	; 0x7ae <UART_send>
  // Put data into buffer and send data
  UDR0 = data;
     7b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     7ba:	08 95       	ret

000007bc <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
     7c4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <UART_send>
  StringPtr++;
     7c8:	21 96       	adiw	r28, 0x01	; 1
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
     7ca:	88 81       	ld	r24, Y
     7cc:	81 11       	cpse	r24, r1
     7ce:	fa cf       	rjmp	.-12     	; 0x7c4 <UART_putstring+0x8>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <__subsf3>:
     7d6:	50 58       	subi	r21, 0x80	; 128

000007d8 <__addsf3>:
     7d8:	bb 27       	eor	r27, r27
     7da:	aa 27       	eor	r26, r26
     7dc:	0e 94 03 04 	call	0x806	; 0x806 <__addsf3x>
     7e0:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__fp_round>
     7e4:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_pscA>
     7e8:	38 f0       	brcs	.+14     	; 0x7f8 <__addsf3+0x20>
     7ea:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscB>
     7ee:	20 f0       	brcs	.+8      	; 0x7f8 <__addsf3+0x20>
     7f0:	39 f4       	brne	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
     7f2:	9f 3f       	cpi	r25, 0xFF	; 255
     7f4:	19 f4       	brne	.+6      	; 0x7fc <__addsf3+0x24>
     7f6:	26 f4       	brtc	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
     7f8:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_nan>
     7fc:	0e f4       	brtc	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	e0 95       	com	r30
     800:	e7 fb       	bst	r30, 7
     802:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>

00000806 <__addsf3x>:
     806:	e9 2f       	mov	r30, r25
     808:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_split3>
     80c:	58 f3       	brcs	.-42     	; 0x7e4 <__addsf3+0xc>
     80e:	ba 17       	cp	r27, r26
     810:	62 07       	cpc	r22, r18
     812:	73 07       	cpc	r23, r19
     814:	84 07       	cpc	r24, r20
     816:	95 07       	cpc	r25, r21
     818:	20 f0       	brcs	.+8      	; 0x822 <__addsf3x+0x1c>
     81a:	79 f4       	brne	.+30     	; 0x83a <__addsf3x+0x34>
     81c:	a6 f5       	brtc	.+104    	; 0x886 <__addsf3x+0x80>
     81e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_zero>
     822:	0e f4       	brtc	.+2      	; 0x826 <__addsf3x+0x20>
     824:	e0 95       	com	r30
     826:	0b 2e       	mov	r0, r27
     828:	ba 2f       	mov	r27, r26
     82a:	a0 2d       	mov	r26, r0
     82c:	0b 01       	movw	r0, r22
     82e:	b9 01       	movw	r22, r18
     830:	90 01       	movw	r18, r0
     832:	0c 01       	movw	r0, r24
     834:	ca 01       	movw	r24, r20
     836:	a0 01       	movw	r20, r0
     838:	11 24       	eor	r1, r1
     83a:	ff 27       	eor	r31, r31
     83c:	59 1b       	sub	r21, r25
     83e:	99 f0       	breq	.+38     	; 0x866 <__addsf3x+0x60>
     840:	59 3f       	cpi	r21, 0xF9	; 249
     842:	50 f4       	brcc	.+20     	; 0x858 <__addsf3x+0x52>
     844:	50 3e       	cpi	r21, 0xE0	; 224
     846:	68 f1       	brcs	.+90     	; 0x8a2 <__addsf3x+0x9c>
     848:	1a 16       	cp	r1, r26
     84a:	f0 40       	sbci	r31, 0x00	; 0
     84c:	a2 2f       	mov	r26, r18
     84e:	23 2f       	mov	r18, r19
     850:	34 2f       	mov	r19, r20
     852:	44 27       	eor	r20, r20
     854:	58 5f       	subi	r21, 0xF8	; 248
     856:	f3 cf       	rjmp	.-26     	; 0x83e <__addsf3x+0x38>
     858:	46 95       	lsr	r20
     85a:	37 95       	ror	r19
     85c:	27 95       	ror	r18
     85e:	a7 95       	ror	r26
     860:	f0 40       	sbci	r31, 0x00	; 0
     862:	53 95       	inc	r21
     864:	c9 f7       	brne	.-14     	; 0x858 <__addsf3x+0x52>
     866:	7e f4       	brtc	.+30     	; 0x886 <__addsf3x+0x80>
     868:	1f 16       	cp	r1, r31
     86a:	ba 0b       	sbc	r27, r26
     86c:	62 0b       	sbc	r22, r18
     86e:	73 0b       	sbc	r23, r19
     870:	84 0b       	sbc	r24, r20
     872:	ba f0       	brmi	.+46     	; 0x8a2 <__addsf3x+0x9c>
     874:	91 50       	subi	r25, 0x01	; 1
     876:	a1 f0       	breq	.+40     	; 0x8a0 <__addsf3x+0x9a>
     878:	ff 0f       	add	r31, r31
     87a:	bb 1f       	adc	r27, r27
     87c:	66 1f       	adc	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	88 1f       	adc	r24, r24
     882:	c2 f7       	brpl	.-16     	; 0x874 <__addsf3x+0x6e>
     884:	0e c0       	rjmp	.+28     	; 0x8a2 <__addsf3x+0x9c>
     886:	ba 0f       	add	r27, r26
     888:	62 1f       	adc	r22, r18
     88a:	73 1f       	adc	r23, r19
     88c:	84 1f       	adc	r24, r20
     88e:	48 f4       	brcc	.+18     	; 0x8a2 <__addsf3x+0x9c>
     890:	87 95       	ror	r24
     892:	77 95       	ror	r23
     894:	67 95       	ror	r22
     896:	b7 95       	ror	r27
     898:	f7 95       	ror	r31
     89a:	9e 3f       	cpi	r25, 0xFE	; 254
     89c:	08 f0       	brcs	.+2      	; 0x8a0 <__addsf3x+0x9a>
     89e:	b0 cf       	rjmp	.-160    	; 0x800 <__DATA_REGION_LENGTH__>
     8a0:	93 95       	inc	r25
     8a2:	88 0f       	add	r24, r24
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <__addsf3x+0xa2>
     8a6:	99 27       	eor	r25, r25
     8a8:	ee 0f       	add	r30, r30
     8aa:	97 95       	ror	r25
     8ac:	87 95       	ror	r24
     8ae:	08 95       	ret

000008b0 <__cmpsf2>:
     8b0:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_cmp>
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <__cmpsf2+0x8>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	08 95       	ret

000008ba <__divsf3>:
     8ba:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divsf3x>
     8be:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__fp_round>
     8c2:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscB>
     8c6:	58 f0       	brcs	.+22     	; 0x8de <__divsf3+0x24>
     8c8:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_pscA>
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__divsf3+0x24>
     8ce:	29 f4       	brne	.+10     	; 0x8da <__divsf3+0x20>
     8d0:	5f 3f       	cpi	r21, 0xFF	; 255
     8d2:	29 f0       	breq	.+10     	; 0x8de <__divsf3+0x24>
     8d4:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
     8d8:	51 11       	cpse	r21, r1
     8da:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>
     8de:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_nan>

000008e2 <__divsf3x>:
     8e2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_split3>
     8e6:	68 f3       	brcs	.-38     	; 0x8c2 <__divsf3+0x8>

000008e8 <__divsf3_pse>:
     8e8:	99 23       	and	r25, r25
     8ea:	b1 f3       	breq	.-20     	; 0x8d8 <__divsf3+0x1e>
     8ec:	55 23       	and	r21, r21
     8ee:	91 f3       	breq	.-28     	; 0x8d4 <__divsf3+0x1a>
     8f0:	95 1b       	sub	r25, r21
     8f2:	55 0b       	sbc	r21, r21
     8f4:	bb 27       	eor	r27, r27
     8f6:	aa 27       	eor	r26, r26
     8f8:	62 17       	cp	r22, r18
     8fa:	73 07       	cpc	r23, r19
     8fc:	84 07       	cpc	r24, r20
     8fe:	38 f0       	brcs	.+14     	; 0x90e <__stack+0xf>
     900:	9f 5f       	subi	r25, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	22 0f       	add	r18, r18
     906:	33 1f       	adc	r19, r19
     908:	44 1f       	adc	r20, r20
     90a:	aa 1f       	adc	r26, r26
     90c:	a9 f3       	breq	.-22     	; 0x8f8 <__divsf3_pse+0x10>
     90e:	35 d0       	rcall	.+106    	; 0x97a <__stack+0x7b>
     910:	0e 2e       	mov	r0, r30
     912:	3a f0       	brmi	.+14     	; 0x922 <__stack+0x23>
     914:	e0 e8       	ldi	r30, 0x80	; 128
     916:	32 d0       	rcall	.+100    	; 0x97c <__stack+0x7d>
     918:	91 50       	subi	r25, 0x01	; 1
     91a:	50 40       	sbci	r21, 0x00	; 0
     91c:	e6 95       	lsr	r30
     91e:	00 1c       	adc	r0, r0
     920:	ca f7       	brpl	.-14     	; 0x914 <__stack+0x15>
     922:	2b d0       	rcall	.+86     	; 0x97a <__stack+0x7b>
     924:	fe 2f       	mov	r31, r30
     926:	29 d0       	rcall	.+82     	; 0x97a <__stack+0x7b>
     928:	66 0f       	add	r22, r22
     92a:	77 1f       	adc	r23, r23
     92c:	88 1f       	adc	r24, r24
     92e:	bb 1f       	adc	r27, r27
     930:	26 17       	cp	r18, r22
     932:	37 07       	cpc	r19, r23
     934:	48 07       	cpc	r20, r24
     936:	ab 07       	cpc	r26, r27
     938:	b0 e8       	ldi	r27, 0x80	; 128
     93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0x3f>
     93c:	bb 0b       	sbc	r27, r27
     93e:	80 2d       	mov	r24, r0
     940:	bf 01       	movw	r22, r30
     942:	ff 27       	eor	r31, r31
     944:	93 58       	subi	r25, 0x83	; 131
     946:	5f 4f       	sbci	r21, 0xFF	; 255
     948:	3a f0       	brmi	.+14     	; 0x958 <__stack+0x59>
     94a:	9e 3f       	cpi	r25, 0xFE	; 254
     94c:	51 05       	cpc	r21, r1
     94e:	78 f0       	brcs	.+30     	; 0x96e <__stack+0x6f>
     950:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
     954:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>
     958:	5f 3f       	cpi	r21, 0xFF	; 255
     95a:	e4 f3       	brlt	.-8      	; 0x954 <__stack+0x55>
     95c:	98 3e       	cpi	r25, 0xE8	; 232
     95e:	d4 f3       	brlt	.-12     	; 0x954 <__stack+0x55>
     960:	86 95       	lsr	r24
     962:	77 95       	ror	r23
     964:	67 95       	ror	r22
     966:	b7 95       	ror	r27
     968:	f7 95       	ror	r31
     96a:	9f 5f       	subi	r25, 0xFF	; 255
     96c:	c9 f7       	brne	.-14     	; 0x960 <__stack+0x61>
     96e:	88 0f       	add	r24, r24
     970:	91 1d       	adc	r25, r1
     972:	96 95       	lsr	r25
     974:	87 95       	ror	r24
     976:	97 f9       	bld	r25, 7
     978:	08 95       	ret
     97a:	e1 e0       	ldi	r30, 0x01	; 1
     97c:	66 0f       	add	r22, r22
     97e:	77 1f       	adc	r23, r23
     980:	88 1f       	adc	r24, r24
     982:	bb 1f       	adc	r27, r27
     984:	62 17       	cp	r22, r18
     986:	73 07       	cpc	r23, r19
     988:	84 07       	cpc	r24, r20
     98a:	ba 07       	cpc	r27, r26
     98c:	20 f0       	brcs	.+8      	; 0x996 <__stack+0x97>
     98e:	62 1b       	sub	r22, r18
     990:	73 0b       	sbc	r23, r19
     992:	84 0b       	sbc	r24, r20
     994:	ba 0b       	sbc	r27, r26
     996:	ee 1f       	adc	r30, r30
     998:	88 f7       	brcc	.-30     	; 0x97c <__stack+0x7d>
     99a:	e0 95       	com	r30
     99c:	08 95       	ret
     99e:	29 f4       	brne	.+10     	; 0x9aa <__stack+0xab>
     9a0:	16 f0       	brts	.+4      	; 0x9a6 <__stack+0xa7>
     9a2:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
     9a6:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_zero>
     9aa:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_nan>

000009ae <exp>:
     9ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fp_splitA>
     9b2:	a8 f3       	brcs	.-22     	; 0x99e <__stack+0x9f>
     9b4:	96 38       	cpi	r25, 0x86	; 134
     9b6:	a0 f7       	brcc	.-24     	; 0x9a0 <__stack+0xa1>
     9b8:	07 f8       	bld	r0, 7
     9ba:	0f 92       	push	r0
     9bc:	e8 94       	clt
     9be:	2b e3       	ldi	r18, 0x3B	; 59
     9c0:	3a ea       	ldi	r19, 0xAA	; 170
     9c2:	48 eb       	ldi	r20, 0xB8	; 184
     9c4:	5f e7       	ldi	r21, 0x7F	; 127
     9c6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3_pse>
     9ca:	0f 92       	push	r0
     9cc:	0f 92       	push	r0
     9ce:	0f 92       	push	r0
     9d0:	4d b7       	in	r20, 0x3d	; 61
     9d2:	5e b7       	in	r21, 0x3e	; 62
     9d4:	0f 92       	push	r0
     9d6:	0e 94 53 06 	call	0xca6	; 0xca6 <modf>
     9da:	e4 eb       	ldi	r30, 0xB4	; 180
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_powser>
     9e2:	4f 91       	pop	r20
     9e4:	5f 91       	pop	r21
     9e6:	ef 91       	pop	r30
     9e8:	ff 91       	pop	r31
     9ea:	e5 95       	asr	r30
     9ec:	ee 1f       	adc	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	49 f0       	breq	.+18     	; 0xa04 <exp+0x56>
     9f2:	fe 57       	subi	r31, 0x7E	; 126
     9f4:	e0 68       	ori	r30, 0x80	; 128
     9f6:	44 27       	eor	r20, r20
     9f8:	ee 0f       	add	r30, r30
     9fa:	44 1f       	adc	r20, r20
     9fc:	fa 95       	dec	r31
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <exp+0x4a>
     a00:	41 95       	neg	r20
     a02:	55 0b       	sbc	r21, r21
     a04:	0e 94 1d 06 	call	0xc3a	; 0xc3a <ldexp>
     a08:	0f 90       	pop	r0
     a0a:	07 fe       	sbrs	r0, 7
     a0c:	0c 94 11 06 	jmp	0xc22	; 0xc22 <inverse>
     a10:	08 95       	ret

00000a12 <__fixunssfsi>:
     a12:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fp_splitA>
     a16:	88 f0       	brcs	.+34     	; 0xa3a <__fixunssfsi+0x28>
     a18:	9f 57       	subi	r25, 0x7F	; 127
     a1a:	98 f0       	brcs	.+38     	; 0xa42 <__fixunssfsi+0x30>
     a1c:	b9 2f       	mov	r27, r25
     a1e:	99 27       	eor	r25, r25
     a20:	b7 51       	subi	r27, 0x17	; 23
     a22:	b0 f0       	brcs	.+44     	; 0xa50 <__fixunssfsi+0x3e>
     a24:	e1 f0       	breq	.+56     	; 0xa5e <__fixunssfsi+0x4c>
     a26:	66 0f       	add	r22, r22
     a28:	77 1f       	adc	r23, r23
     a2a:	88 1f       	adc	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	1a f0       	brmi	.+6      	; 0xa36 <__fixunssfsi+0x24>
     a30:	ba 95       	dec	r27
     a32:	c9 f7       	brne	.-14     	; 0xa26 <__fixunssfsi+0x14>
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <__fixunssfsi+0x4c>
     a36:	b1 30       	cpi	r27, 0x01	; 1
     a38:	91 f0       	breq	.+36     	; 0xa5e <__fixunssfsi+0x4c>
     a3a:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_zero>
     a3e:	b1 e0       	ldi	r27, 0x01	; 1
     a40:	08 95       	ret
     a42:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_zero>
     a46:	67 2f       	mov	r22, r23
     a48:	78 2f       	mov	r23, r24
     a4a:	88 27       	eor	r24, r24
     a4c:	b8 5f       	subi	r27, 0xF8	; 248
     a4e:	39 f0       	breq	.+14     	; 0xa5e <__fixunssfsi+0x4c>
     a50:	b9 3f       	cpi	r27, 0xF9	; 249
     a52:	cc f3       	brlt	.-14     	; 0xa46 <__fixunssfsi+0x34>
     a54:	86 95       	lsr	r24
     a56:	77 95       	ror	r23
     a58:	67 95       	ror	r22
     a5a:	b3 95       	inc	r27
     a5c:	d9 f7       	brne	.-10     	; 0xa54 <__fixunssfsi+0x42>
     a5e:	3e f4       	brtc	.+14     	; 0xa6e <__fixunssfsi+0x5c>
     a60:	90 95       	com	r25
     a62:	80 95       	com	r24
     a64:	70 95       	com	r23
     a66:	61 95       	neg	r22
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	8f 4f       	sbci	r24, 0xFF	; 255
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	08 95       	ret

00000a70 <__floatunsisf>:
     a70:	e8 94       	clt
     a72:	09 c0       	rjmp	.+18     	; 0xa86 <__floatsisf+0x12>

00000a74 <__floatsisf>:
     a74:	97 fb       	bst	r25, 7
     a76:	3e f4       	brtc	.+14     	; 0xa86 <__floatsisf+0x12>
     a78:	90 95       	com	r25
     a7a:	80 95       	com	r24
     a7c:	70 95       	com	r23
     a7e:	61 95       	neg	r22
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	8f 4f       	sbci	r24, 0xFF	; 255
     a84:	9f 4f       	sbci	r25, 0xFF	; 255
     a86:	99 23       	and	r25, r25
     a88:	a9 f0       	breq	.+42     	; 0xab4 <__floatsisf+0x40>
     a8a:	f9 2f       	mov	r31, r25
     a8c:	96 e9       	ldi	r25, 0x96	; 150
     a8e:	bb 27       	eor	r27, r27
     a90:	93 95       	inc	r25
     a92:	f6 95       	lsr	r31
     a94:	87 95       	ror	r24
     a96:	77 95       	ror	r23
     a98:	67 95       	ror	r22
     a9a:	b7 95       	ror	r27
     a9c:	f1 11       	cpse	r31, r1
     a9e:	f8 cf       	rjmp	.-16     	; 0xa90 <__floatsisf+0x1c>
     aa0:	fa f4       	brpl	.+62     	; 0xae0 <__floatsisf+0x6c>
     aa2:	bb 0f       	add	r27, r27
     aa4:	11 f4       	brne	.+4      	; 0xaaa <__floatsisf+0x36>
     aa6:	60 ff       	sbrs	r22, 0
     aa8:	1b c0       	rjmp	.+54     	; 0xae0 <__floatsisf+0x6c>
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	8f 4f       	sbci	r24, 0xFF	; 255
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	16 c0       	rjmp	.+44     	; 0xae0 <__floatsisf+0x6c>
     ab4:	88 23       	and	r24, r24
     ab6:	11 f0       	breq	.+4      	; 0xabc <__floatsisf+0x48>
     ab8:	96 e9       	ldi	r25, 0x96	; 150
     aba:	11 c0       	rjmp	.+34     	; 0xade <__floatsisf+0x6a>
     abc:	77 23       	and	r23, r23
     abe:	21 f0       	breq	.+8      	; 0xac8 <__floatsisf+0x54>
     ac0:	9e e8       	ldi	r25, 0x8E	; 142
     ac2:	87 2f       	mov	r24, r23
     ac4:	76 2f       	mov	r23, r22
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <__floatsisf+0x5e>
     ac8:	66 23       	and	r22, r22
     aca:	71 f0       	breq	.+28     	; 0xae8 <__floatsisf+0x74>
     acc:	96 e8       	ldi	r25, 0x86	; 134
     ace:	86 2f       	mov	r24, r22
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	2a f0       	brmi	.+10     	; 0xae0 <__floatsisf+0x6c>
     ad6:	9a 95       	dec	r25
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	88 1f       	adc	r24, r24
     ade:	da f7       	brpl	.-10     	; 0xad6 <__floatsisf+0x62>
     ae0:	88 0f       	add	r24, r24
     ae2:	96 95       	lsr	r25
     ae4:	87 95       	ror	r24
     ae6:	97 f9       	bld	r25, 7
     ae8:	08 95       	ret

00000aea <__fp_cmp>:
     aea:	99 0f       	add	r25, r25
     aec:	00 08       	sbc	r0, r0
     aee:	55 0f       	add	r21, r21
     af0:	aa 0b       	sbc	r26, r26
     af2:	e0 e8       	ldi	r30, 0x80	; 128
     af4:	fe ef       	ldi	r31, 0xFE	; 254
     af6:	16 16       	cp	r1, r22
     af8:	17 06       	cpc	r1, r23
     afa:	e8 07       	cpc	r30, r24
     afc:	f9 07       	cpc	r31, r25
     afe:	c0 f0       	brcs	.+48     	; 0xb30 <__fp_cmp+0x46>
     b00:	12 16       	cp	r1, r18
     b02:	13 06       	cpc	r1, r19
     b04:	e4 07       	cpc	r30, r20
     b06:	f5 07       	cpc	r31, r21
     b08:	98 f0       	brcs	.+38     	; 0xb30 <__fp_cmp+0x46>
     b0a:	62 1b       	sub	r22, r18
     b0c:	73 0b       	sbc	r23, r19
     b0e:	84 0b       	sbc	r24, r20
     b10:	95 0b       	sbc	r25, r21
     b12:	39 f4       	brne	.+14     	; 0xb22 <__fp_cmp+0x38>
     b14:	0a 26       	eor	r0, r26
     b16:	61 f0       	breq	.+24     	; 0xb30 <__fp_cmp+0x46>
     b18:	23 2b       	or	r18, r19
     b1a:	24 2b       	or	r18, r20
     b1c:	25 2b       	or	r18, r21
     b1e:	21 f4       	brne	.+8      	; 0xb28 <__fp_cmp+0x3e>
     b20:	08 95       	ret
     b22:	0a 26       	eor	r0, r26
     b24:	09 f4       	brne	.+2      	; 0xb28 <__fp_cmp+0x3e>
     b26:	a1 40       	sbci	r26, 0x01	; 1
     b28:	a6 95       	lsr	r26
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	81 1d       	adc	r24, r1
     b2e:	81 1d       	adc	r24, r1
     b30:	08 95       	ret

00000b32 <__fp_inf>:
     b32:	97 f9       	bld	r25, 7
     b34:	9f 67       	ori	r25, 0x7F	; 127
     b36:	80 e8       	ldi	r24, 0x80	; 128
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	08 95       	ret

00000b3e <__fp_nan>:
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
     b40:	80 ec       	ldi	r24, 0xC0	; 192
     b42:	08 95       	ret

00000b44 <__fp_powser>:
     b44:	df 93       	push	r29
     b46:	cf 93       	push	r28
     b48:	1f 93       	push	r17
     b4a:	0f 93       	push	r16
     b4c:	ff 92       	push	r15
     b4e:	ef 92       	push	r14
     b50:	df 92       	push	r13
     b52:	7b 01       	movw	r14, r22
     b54:	8c 01       	movw	r16, r24
     b56:	68 94       	set
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <__fp_powser+0x22>
     b5a:	da 2e       	mov	r13, r26
     b5c:	ef 01       	movw	r28, r30
     b5e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__mulsf3x>
     b62:	fe 01       	movw	r30, r28
     b64:	e8 94       	clt
     b66:	a5 91       	lpm	r26, Z+
     b68:	25 91       	lpm	r18, Z+
     b6a:	35 91       	lpm	r19, Z+
     b6c:	45 91       	lpm	r20, Z+
     b6e:	55 91       	lpm	r21, Z+
     b70:	a6 f3       	brts	.-24     	; 0xb5a <__fp_powser+0x16>
     b72:	ef 01       	movw	r28, r30
     b74:	0e 94 03 04 	call	0x806	; 0x806 <__addsf3x>
     b78:	fe 01       	movw	r30, r28
     b7a:	97 01       	movw	r18, r14
     b7c:	a8 01       	movw	r20, r16
     b7e:	da 94       	dec	r13
     b80:	69 f7       	brne	.-38     	; 0xb5c <__fp_powser+0x18>
     b82:	df 90       	pop	r13
     b84:	ef 90       	pop	r14
     b86:	ff 90       	pop	r15
     b88:	0f 91       	pop	r16
     b8a:	1f 91       	pop	r17
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <__fp_pscA>:
     b92:	00 24       	eor	r0, r0
     b94:	0a 94       	dec	r0
     b96:	16 16       	cp	r1, r22
     b98:	17 06       	cpc	r1, r23
     b9a:	18 06       	cpc	r1, r24
     b9c:	09 06       	cpc	r0, r25
     b9e:	08 95       	ret

00000ba0 <__fp_pscB>:
     ba0:	00 24       	eor	r0, r0
     ba2:	0a 94       	dec	r0
     ba4:	12 16       	cp	r1, r18
     ba6:	13 06       	cpc	r1, r19
     ba8:	14 06       	cpc	r1, r20
     baa:	05 06       	cpc	r0, r21
     bac:	08 95       	ret

00000bae <__fp_round>:
     bae:	09 2e       	mov	r0, r25
     bb0:	03 94       	inc	r0
     bb2:	00 0c       	add	r0, r0
     bb4:	11 f4       	brne	.+4      	; 0xbba <__fp_round+0xc>
     bb6:	88 23       	and	r24, r24
     bb8:	52 f0       	brmi	.+20     	; 0xbce <__fp_round+0x20>
     bba:	bb 0f       	add	r27, r27
     bbc:	40 f4       	brcc	.+16     	; 0xbce <__fp_round+0x20>
     bbe:	bf 2b       	or	r27, r31
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__fp_round+0x18>
     bc2:	60 ff       	sbrs	r22, 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__fp_round+0x20>
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	8f 4f       	sbci	r24, 0xFF	; 255
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	08 95       	ret

00000bd0 <__fp_split3>:
     bd0:	57 fd       	sbrc	r21, 7
     bd2:	90 58       	subi	r25, 0x80	; 128
     bd4:	44 0f       	add	r20, r20
     bd6:	55 1f       	adc	r21, r21
     bd8:	59 f0       	breq	.+22     	; 0xbf0 <__fp_splitA+0x10>
     bda:	5f 3f       	cpi	r21, 0xFF	; 255
     bdc:	71 f0       	breq	.+28     	; 0xbfa <__fp_splitA+0x1a>
     bde:	47 95       	ror	r20

00000be0 <__fp_splitA>:
     be0:	88 0f       	add	r24, r24
     be2:	97 fb       	bst	r25, 7
     be4:	99 1f       	adc	r25, r25
     be6:	61 f0       	breq	.+24     	; 0xc00 <__fp_splitA+0x20>
     be8:	9f 3f       	cpi	r25, 0xFF	; 255
     bea:	79 f0       	breq	.+30     	; 0xc0a <__fp_splitA+0x2a>
     bec:	87 95       	ror	r24
     bee:	08 95       	ret
     bf0:	12 16       	cp	r1, r18
     bf2:	13 06       	cpc	r1, r19
     bf4:	14 06       	cpc	r1, r20
     bf6:	55 1f       	adc	r21, r21
     bf8:	f2 cf       	rjmp	.-28     	; 0xbde <__fp_split3+0xe>
     bfa:	46 95       	lsr	r20
     bfc:	f1 df       	rcall	.-30     	; 0xbe0 <__fp_splitA>
     bfe:	08 c0       	rjmp	.+16     	; 0xc10 <__fp_splitA+0x30>
     c00:	16 16       	cp	r1, r22
     c02:	17 06       	cpc	r1, r23
     c04:	18 06       	cpc	r1, r24
     c06:	99 1f       	adc	r25, r25
     c08:	f1 cf       	rjmp	.-30     	; 0xbec <__fp_splitA+0xc>
     c0a:	86 95       	lsr	r24
     c0c:	71 05       	cpc	r23, r1
     c0e:	61 05       	cpc	r22, r1
     c10:	08 94       	sec
     c12:	08 95       	ret

00000c14 <__fp_zero>:
     c14:	e8 94       	clt

00000c16 <__fp_szero>:
     c16:	bb 27       	eor	r27, r27
     c18:	66 27       	eor	r22, r22
     c1a:	77 27       	eor	r23, r23
     c1c:	cb 01       	movw	r24, r22
     c1e:	97 f9       	bld	r25, 7
     c20:	08 95       	ret

00000c22 <inverse>:
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e8       	ldi	r24, 0x80	; 128
     c2c:	9f e3       	ldi	r25, 0x3F	; 63
     c2e:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__divsf3>
     c32:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
     c36:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_mpack>

00000c3a <ldexp>:
     c3a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fp_splitA>
     c3e:	d8 f3       	brcs	.-10     	; 0xc36 <inverse+0x14>
     c40:	99 23       	and	r25, r25
     c42:	c9 f3       	breq	.-14     	; 0xc36 <inverse+0x14>
     c44:	94 0f       	add	r25, r20
     c46:	51 1d       	adc	r21, r1
     c48:	a3 f3       	brvs	.-24     	; 0xc32 <inverse+0x10>
     c4a:	91 50       	subi	r25, 0x01	; 1
     c4c:	50 40       	sbci	r21, 0x00	; 0
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <ldexp+0x3a>
     c50:	59 f0       	breq	.+22     	; 0xc68 <ldexp+0x2e>
     c52:	88 23       	and	r24, r24
     c54:	32 f0       	brmi	.+12     	; 0xc62 <ldexp+0x28>
     c56:	66 0f       	add	r22, r22
     c58:	77 1f       	adc	r23, r23
     c5a:	88 1f       	adc	r24, r24
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	50 40       	sbci	r21, 0x00	; 0
     c60:	c1 f7       	brne	.-16     	; 0xc52 <ldexp+0x18>
     c62:	9e 3f       	cpi	r25, 0xFE	; 254
     c64:	51 05       	cpc	r21, r1
     c66:	2c f7       	brge	.-54     	; 0xc32 <inverse+0x10>
     c68:	88 0f       	add	r24, r24
     c6a:	91 1d       	adc	r25, r1
     c6c:	96 95       	lsr	r25
     c6e:	87 95       	ror	r24
     c70:	97 f9       	bld	r25, 7
     c72:	08 95       	ret
     c74:	5f 3f       	cpi	r21, 0xFF	; 255
     c76:	ac f0       	brlt	.+42     	; 0xca2 <ldexp+0x68>
     c78:	98 3e       	cpi	r25, 0xE8	; 232
     c7a:	9c f0       	brlt	.+38     	; 0xca2 <ldexp+0x68>
     c7c:	bb 27       	eor	r27, r27
     c7e:	86 95       	lsr	r24
     c80:	77 95       	ror	r23
     c82:	67 95       	ror	r22
     c84:	b7 95       	ror	r27
     c86:	08 f4       	brcc	.+2      	; 0xc8a <ldexp+0x50>
     c88:	b1 60       	ori	r27, 0x01	; 1
     c8a:	93 95       	inc	r25
     c8c:	c1 f7       	brne	.-16     	; 0xc7e <ldexp+0x44>
     c8e:	bb 0f       	add	r27, r27
     c90:	58 f7       	brcc	.-42     	; 0xc68 <ldexp+0x2e>
     c92:	11 f4       	brne	.+4      	; 0xc98 <ldexp+0x5e>
     c94:	60 ff       	sbrs	r22, 0
     c96:	e8 cf       	rjmp	.-48     	; 0xc68 <ldexp+0x2e>
     c98:	6f 5f       	subi	r22, 0xFF	; 255
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	8f 4f       	sbci	r24, 0xFF	; 255
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	e3 cf       	rjmp	.-58     	; 0xc68 <ldexp+0x2e>
     ca2:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>

00000ca6 <modf>:
     ca6:	fa 01       	movw	r30, r20
     ca8:	dc 01       	movw	r26, r24
     caa:	aa 0f       	add	r26, r26
     cac:	bb 1f       	adc	r27, r27
     cae:	9b 01       	movw	r18, r22
     cb0:	ac 01       	movw	r20, r24
     cb2:	bf 57       	subi	r27, 0x7F	; 127
     cb4:	28 f4       	brcc	.+10     	; 0xcc0 <modf+0x1a>
     cb6:	22 27       	eor	r18, r18
     cb8:	33 27       	eor	r19, r19
     cba:	44 27       	eor	r20, r20
     cbc:	50 78       	andi	r21, 0x80	; 128
     cbe:	20 c0       	rjmp	.+64     	; 0xd00 <modf+0x5a>
     cc0:	b7 51       	subi	r27, 0x17	; 23
     cc2:	90 f4       	brcc	.+36     	; 0xce8 <modf+0x42>
     cc4:	ab 2f       	mov	r26, r27
     cc6:	00 24       	eor	r0, r0
     cc8:	46 95       	lsr	r20
     cca:	37 95       	ror	r19
     ccc:	27 95       	ror	r18
     cce:	01 1c       	adc	r0, r1
     cd0:	a3 95       	inc	r26
     cd2:	d2 f3       	brmi	.-12     	; 0xcc8 <modf+0x22>
     cd4:	00 20       	and	r0, r0
     cd6:	71 f0       	breq	.+28     	; 0xcf4 <modf+0x4e>
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	44 1f       	adc	r20, r20
     cde:	b3 95       	inc	r27
     ce0:	da f3       	brmi	.-10     	; 0xcd8 <modf+0x32>
     ce2:	0e d0       	rcall	.+28     	; 0xd00 <modf+0x5a>
     ce4:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__subsf3>
     ce8:	61 30       	cpi	r22, 0x01	; 1
     cea:	71 05       	cpc	r23, r1
     cec:	a0 e8       	ldi	r26, 0x80	; 128
     cee:	8a 07       	cpc	r24, r26
     cf0:	b9 46       	sbci	r27, 0x69	; 105
     cf2:	30 f4       	brcc	.+12     	; 0xd00 <modf+0x5a>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	66 27       	eor	r22, r22
     cfa:	77 27       	eor	r23, r23
     cfc:	88 27       	eor	r24, r24
     cfe:	90 78       	andi	r25, 0x80	; 128
     d00:	30 96       	adiw	r30, 0x00	; 0
     d02:	21 f0       	breq	.+8      	; 0xd0c <modf+0x66>
     d04:	20 83       	st	Z, r18
     d06:	31 83       	std	Z+1, r19	; 0x01
     d08:	42 83       	std	Z+2, r20	; 0x02
     d0a:	53 83       	std	Z+3, r21	; 0x03
     d0c:	08 95       	ret

00000d0e <__mulsf3>:
     d0e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__mulsf3x>
     d12:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__fp_round>
     d16:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_pscA>
     d1a:	38 f0       	brcs	.+14     	; 0xd2a <__mulsf3+0x1c>
     d1c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscB>
     d20:	20 f0       	brcs	.+8      	; 0xd2a <__mulsf3+0x1c>
     d22:	95 23       	and	r25, r21
     d24:	11 f0       	breq	.+4      	; 0xd2a <__mulsf3+0x1c>
     d26:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
     d2a:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_nan>
     d2e:	11 24       	eor	r1, r1
     d30:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>

00000d34 <__mulsf3x>:
     d34:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_split3>
     d38:	70 f3       	brcs	.-36     	; 0xd16 <__mulsf3+0x8>

00000d3a <__mulsf3_pse>:
     d3a:	95 9f       	mul	r25, r21
     d3c:	c1 f3       	breq	.-16     	; 0xd2e <__mulsf3+0x20>
     d3e:	95 0f       	add	r25, r21
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	55 1f       	adc	r21, r21
     d44:	62 9f       	mul	r22, r18
     d46:	f0 01       	movw	r30, r0
     d48:	72 9f       	mul	r23, r18
     d4a:	bb 27       	eor	r27, r27
     d4c:	f0 0d       	add	r31, r0
     d4e:	b1 1d       	adc	r27, r1
     d50:	63 9f       	mul	r22, r19
     d52:	aa 27       	eor	r26, r26
     d54:	f0 0d       	add	r31, r0
     d56:	b1 1d       	adc	r27, r1
     d58:	aa 1f       	adc	r26, r26
     d5a:	64 9f       	mul	r22, r20
     d5c:	66 27       	eor	r22, r22
     d5e:	b0 0d       	add	r27, r0
     d60:	a1 1d       	adc	r26, r1
     d62:	66 1f       	adc	r22, r22
     d64:	82 9f       	mul	r24, r18
     d66:	22 27       	eor	r18, r18
     d68:	b0 0d       	add	r27, r0
     d6a:	a1 1d       	adc	r26, r1
     d6c:	62 1f       	adc	r22, r18
     d6e:	73 9f       	mul	r23, r19
     d70:	b0 0d       	add	r27, r0
     d72:	a1 1d       	adc	r26, r1
     d74:	62 1f       	adc	r22, r18
     d76:	83 9f       	mul	r24, r19
     d78:	a0 0d       	add	r26, r0
     d7a:	61 1d       	adc	r22, r1
     d7c:	22 1f       	adc	r18, r18
     d7e:	74 9f       	mul	r23, r20
     d80:	33 27       	eor	r19, r19
     d82:	a0 0d       	add	r26, r0
     d84:	61 1d       	adc	r22, r1
     d86:	23 1f       	adc	r18, r19
     d88:	84 9f       	mul	r24, r20
     d8a:	60 0d       	add	r22, r0
     d8c:	21 1d       	adc	r18, r1
     d8e:	82 2f       	mov	r24, r18
     d90:	76 2f       	mov	r23, r22
     d92:	6a 2f       	mov	r22, r26
     d94:	11 24       	eor	r1, r1
     d96:	9f 57       	subi	r25, 0x7F	; 127
     d98:	50 40       	sbci	r21, 0x00	; 0
     d9a:	9a f0       	brmi	.+38     	; 0xdc2 <__mulsf3_pse+0x88>
     d9c:	f1 f0       	breq	.+60     	; 0xdda <__mulsf3_pse+0xa0>
     d9e:	88 23       	and	r24, r24
     da0:	4a f0       	brmi	.+18     	; 0xdb4 <__mulsf3_pse+0x7a>
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	bb 1f       	adc	r27, r27
     da8:	66 1f       	adc	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	91 50       	subi	r25, 0x01	; 1
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	a9 f7       	brne	.-22     	; 0xd9e <__mulsf3_pse+0x64>
     db4:	9e 3f       	cpi	r25, 0xFE	; 254
     db6:	51 05       	cpc	r21, r1
     db8:	80 f0       	brcs	.+32     	; 0xdda <__mulsf3_pse+0xa0>
     dba:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
     dbe:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_szero>
     dc2:	5f 3f       	cpi	r21, 0xFF	; 255
     dc4:	e4 f3       	brlt	.-8      	; 0xdbe <__mulsf3_pse+0x84>
     dc6:	98 3e       	cpi	r25, 0xE8	; 232
     dc8:	d4 f3       	brlt	.-12     	; 0xdbe <__mulsf3_pse+0x84>
     dca:	86 95       	lsr	r24
     dcc:	77 95       	ror	r23
     dce:	67 95       	ror	r22
     dd0:	b7 95       	ror	r27
     dd2:	f7 95       	ror	r31
     dd4:	e7 95       	ror	r30
     dd6:	9f 5f       	subi	r25, 0xFF	; 255
     dd8:	c1 f7       	brne	.-16     	; 0xdca <__mulsf3_pse+0x90>
     dda:	fe 2b       	or	r31, r30
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret

00000de8 <__fp_mpack>:
     de8:	9f 3f       	cpi	r25, 0xFF	; 255
     dea:	31 f0       	breq	.+12     	; 0xdf8 <__fp_mpack_finite+0xc>

00000dec <__fp_mpack_finite>:
     dec:	91 50       	subi	r25, 0x01	; 1
     dee:	20 f4       	brcc	.+8      	; 0xdf8 <__fp_mpack_finite+0xc>
     df0:	87 95       	ror	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b7 95       	ror	r27
     df8:	88 0f       	add	r24, r24
     dfa:	91 1d       	adc	r25, r1
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret

00000e04 <__divmodsi4>:
     e04:	05 2e       	mov	r0, r21
     e06:	97 fb       	bst	r25, 7
     e08:	1e f4       	brtc	.+6      	; 0xe10 <__divmodsi4+0xc>
     e0a:	00 94       	com	r0
     e0c:	0e 94 19 07 	call	0xe32	; 0xe32 <__negsi2>
     e10:	57 fd       	sbrc	r21, 7
     e12:	07 d0       	rcall	.+14     	; 0xe22 <__divmodsi4_neg2>
     e14:	0e 94 29 07 	call	0xe52	; 0xe52 <__udivmodsi4>
     e18:	07 fc       	sbrc	r0, 7
     e1a:	03 d0       	rcall	.+6      	; 0xe22 <__divmodsi4_neg2>
     e1c:	4e f4       	brtc	.+18     	; 0xe30 <__divmodsi4_exit>
     e1e:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__negsi2>

00000e22 <__divmodsi4_neg2>:
     e22:	50 95       	com	r21
     e24:	40 95       	com	r20
     e26:	30 95       	com	r19
     e28:	21 95       	neg	r18
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	4f 4f       	sbci	r20, 0xFF	; 255
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255

00000e30 <__divmodsi4_exit>:
     e30:	08 95       	ret

00000e32 <__negsi2>:
     e32:	90 95       	com	r25
     e34:	80 95       	com	r24
     e36:	70 95       	com	r23
     e38:	61 95       	neg	r22
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	8f 4f       	sbci	r24, 0xFF	; 255
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	08 95       	ret

00000e42 <__mulshisi3>:
     e42:	b7 ff       	sbrs	r27, 7
     e44:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__muluhisi3>

00000e48 <__mulohisi3>:
     e48:	0e 94 4b 07 	call	0xe96	; 0xe96 <__muluhisi3>
     e4c:	82 1b       	sub	r24, r18
     e4e:	93 0b       	sbc	r25, r19
     e50:	08 95       	ret

00000e52 <__udivmodsi4>:
     e52:	a1 e2       	ldi	r26, 0x21	; 33
     e54:	1a 2e       	mov	r1, r26
     e56:	aa 1b       	sub	r26, r26
     e58:	bb 1b       	sub	r27, r27
     e5a:	fd 01       	movw	r30, r26
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__udivmodsi4_ep>

00000e5e <__udivmodsi4_loop>:
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	ee 1f       	adc	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	a2 17       	cp	r26, r18
     e68:	b3 07       	cpc	r27, r19
     e6a:	e4 07       	cpc	r30, r20
     e6c:	f5 07       	cpc	r31, r21
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <__udivmodsi4_ep>
     e70:	a2 1b       	sub	r26, r18
     e72:	b3 0b       	sbc	r27, r19
     e74:	e4 0b       	sbc	r30, r20
     e76:	f5 0b       	sbc	r31, r21

00000e78 <__udivmodsi4_ep>:
     e78:	66 1f       	adc	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 1f       	adc	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	1a 94       	dec	r1
     e82:	69 f7       	brne	.-38     	; 0xe5e <__udivmodsi4_loop>
     e84:	60 95       	com	r22
     e86:	70 95       	com	r23
     e88:	80 95       	com	r24
     e8a:	90 95       	com	r25
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
     e90:	bd 01       	movw	r22, r26
     e92:	cf 01       	movw	r24, r30
     e94:	08 95       	ret

00000e96 <__muluhisi3>:
     e96:	0e 94 56 07 	call	0xeac	; 0xeac <__umulhisi3>
     e9a:	a5 9f       	mul	r26, r21
     e9c:	90 0d       	add	r25, r0
     e9e:	b4 9f       	mul	r27, r20
     ea0:	90 0d       	add	r25, r0
     ea2:	a4 9f       	mul	r26, r20
     ea4:	80 0d       	add	r24, r0
     ea6:	91 1d       	adc	r25, r1
     ea8:	11 24       	eor	r1, r1
     eaa:	08 95       	ret

00000eac <__umulhisi3>:
     eac:	a2 9f       	mul	r26, r18
     eae:	b0 01       	movw	r22, r0
     eb0:	b3 9f       	mul	r27, r19
     eb2:	c0 01       	movw	r24, r0
     eb4:	a3 9f       	mul	r26, r19
     eb6:	70 0d       	add	r23, r0
     eb8:	81 1d       	adc	r24, r1
     eba:	11 24       	eor	r1, r1
     ebc:	91 1d       	adc	r25, r1
     ebe:	b2 9f       	mul	r27, r18
     ec0:	70 0d       	add	r23, r0
     ec2:	81 1d       	adc	r24, r1
     ec4:	11 24       	eor	r1, r1
     ec6:	91 1d       	adc	r25, r1
     ec8:	08 95       	ret

00000eca <sprintf>:
     eca:	ae e0       	ldi	r26, 0x0E	; 14
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e6       	ldi	r30, 0x6B	; 107
     ed0:	f7 e0       	ldi	r31, 0x07	; 7
     ed2:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__prologue_saves__+0x1c>
     ed6:	0d 89       	ldd	r16, Y+21	; 0x15
     ed8:	1e 89       	ldd	r17, Y+22	; 0x16
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	8c 83       	std	Y+4, r24	; 0x04
     ede:	1a 83       	std	Y+2, r17	; 0x02
     ee0:	09 83       	std	Y+1, r16	; 0x01
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	9f e7       	ldi	r25, 0x7F	; 127
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	ae 01       	movw	r20, r28
     eec:	47 5e       	subi	r20, 0xE7	; 231
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	6f 89       	ldd	r22, Y+23	; 0x17
     ef2:	78 8d       	ldd	r23, Y+24	; 0x18
     ef4:	ce 01       	movw	r24, r28
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	0e 94 87 07 	call	0xf0e	; 0xf0e <vfprintf>
     efc:	ef 81       	ldd	r30, Y+7	; 0x07
     efe:	f8 85       	ldd	r31, Y+8	; 0x08
     f00:	e0 0f       	add	r30, r16
     f02:	f1 1f       	adc	r31, r17
     f04:	10 82       	st	Z, r1
     f06:	2e 96       	adiw	r28, 0x0e	; 14
     f08:	e4 e0       	ldi	r30, 0x04	; 4
     f0a:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__epilogue_restores__+0x1c>

00000f0e <vfprintf>:
     f0e:	ab e0       	ldi	r26, 0x0B	; 11
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ed e8       	ldi	r30, 0x8D	; 141
     f14:	f7 e0       	ldi	r31, 0x07	; 7
     f16:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__prologue_saves__>
     f1a:	6c 01       	movw	r12, r24
     f1c:	7b 01       	movw	r14, r22
     f1e:	8a 01       	movw	r16, r20
     f20:	fc 01       	movw	r30, r24
     f22:	17 82       	std	Z+7, r1	; 0x07
     f24:	16 82       	std	Z+6, r1	; 0x06
     f26:	83 81       	ldd	r24, Z+3	; 0x03
     f28:	81 ff       	sbrs	r24, 1
     f2a:	cc c1       	rjmp	.+920    	; 0x12c4 <vfprintf+0x3b6>
     f2c:	ce 01       	movw	r24, r28
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	3c 01       	movw	r6, r24
     f32:	f6 01       	movw	r30, r12
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	f7 01       	movw	r30, r14
     f38:	93 fd       	sbrc	r25, 3
     f3a:	85 91       	lpm	r24, Z+
     f3c:	93 ff       	sbrs	r25, 3
     f3e:	81 91       	ld	r24, Z+
     f40:	7f 01       	movw	r14, r30
     f42:	88 23       	and	r24, r24
     f44:	09 f4       	brne	.+2      	; 0xf48 <vfprintf+0x3a>
     f46:	ba c1       	rjmp	.+884    	; 0x12bc <vfprintf+0x3ae>
     f48:	85 32       	cpi	r24, 0x25	; 37
     f4a:	39 f4       	brne	.+14     	; 0xf5a <vfprintf+0x4c>
     f4c:	93 fd       	sbrc	r25, 3
     f4e:	85 91       	lpm	r24, Z+
     f50:	93 ff       	sbrs	r25, 3
     f52:	81 91       	ld	r24, Z+
     f54:	7f 01       	movw	r14, r30
     f56:	85 32       	cpi	r24, 0x25	; 37
     f58:	29 f4       	brne	.+10     	; 0xf64 <vfprintf+0x56>
     f5a:	b6 01       	movw	r22, r12
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
     f62:	e7 cf       	rjmp	.-50     	; 0xf32 <vfprintf+0x24>
     f64:	91 2c       	mov	r9, r1
     f66:	21 2c       	mov	r2, r1
     f68:	31 2c       	mov	r3, r1
     f6a:	ff e1       	ldi	r31, 0x1F	; 31
     f6c:	f3 15       	cp	r31, r3
     f6e:	d8 f0       	brcs	.+54     	; 0xfa6 <vfprintf+0x98>
     f70:	8b 32       	cpi	r24, 0x2B	; 43
     f72:	79 f0       	breq	.+30     	; 0xf92 <vfprintf+0x84>
     f74:	38 f4       	brcc	.+14     	; 0xf84 <vfprintf+0x76>
     f76:	80 32       	cpi	r24, 0x20	; 32
     f78:	79 f0       	breq	.+30     	; 0xf98 <vfprintf+0x8a>
     f7a:	83 32       	cpi	r24, 0x23	; 35
     f7c:	a1 f4       	brne	.+40     	; 0xfa6 <vfprintf+0x98>
     f7e:	23 2d       	mov	r18, r3
     f80:	20 61       	ori	r18, 0x10	; 16
     f82:	1d c0       	rjmp	.+58     	; 0xfbe <vfprintf+0xb0>
     f84:	8d 32       	cpi	r24, 0x2D	; 45
     f86:	61 f0       	breq	.+24     	; 0xfa0 <vfprintf+0x92>
     f88:	80 33       	cpi	r24, 0x30	; 48
     f8a:	69 f4       	brne	.+26     	; 0xfa6 <vfprintf+0x98>
     f8c:	23 2d       	mov	r18, r3
     f8e:	21 60       	ori	r18, 0x01	; 1
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <vfprintf+0xb0>
     f92:	83 2d       	mov	r24, r3
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	38 2e       	mov	r3, r24
     f98:	e3 2d       	mov	r30, r3
     f9a:	e4 60       	ori	r30, 0x04	; 4
     f9c:	3e 2e       	mov	r3, r30
     f9e:	2a c0       	rjmp	.+84     	; 0xff4 <vfprintf+0xe6>
     fa0:	f3 2d       	mov	r31, r3
     fa2:	f8 60       	ori	r31, 0x08	; 8
     fa4:	1d c0       	rjmp	.+58     	; 0xfe0 <vfprintf+0xd2>
     fa6:	37 fc       	sbrc	r3, 7
     fa8:	2d c0       	rjmp	.+90     	; 0x1004 <vfprintf+0xf6>
     faa:	20 ed       	ldi	r18, 0xD0	; 208
     fac:	28 0f       	add	r18, r24
     fae:	2a 30       	cpi	r18, 0x0A	; 10
     fb0:	40 f0       	brcs	.+16     	; 0xfc2 <vfprintf+0xb4>
     fb2:	8e 32       	cpi	r24, 0x2E	; 46
     fb4:	b9 f4       	brne	.+46     	; 0xfe4 <vfprintf+0xd6>
     fb6:	36 fc       	sbrc	r3, 6
     fb8:	81 c1       	rjmp	.+770    	; 0x12bc <vfprintf+0x3ae>
     fba:	23 2d       	mov	r18, r3
     fbc:	20 64       	ori	r18, 0x40	; 64
     fbe:	32 2e       	mov	r3, r18
     fc0:	19 c0       	rjmp	.+50     	; 0xff4 <vfprintf+0xe6>
     fc2:	36 fe       	sbrs	r3, 6
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <vfprintf+0xc4>
     fc6:	8a e0       	ldi	r24, 0x0A	; 10
     fc8:	98 9e       	mul	r9, r24
     fca:	20 0d       	add	r18, r0
     fcc:	11 24       	eor	r1, r1
     fce:	92 2e       	mov	r9, r18
     fd0:	11 c0       	rjmp	.+34     	; 0xff4 <vfprintf+0xe6>
     fd2:	ea e0       	ldi	r30, 0x0A	; 10
     fd4:	2e 9e       	mul	r2, r30
     fd6:	20 0d       	add	r18, r0
     fd8:	11 24       	eor	r1, r1
     fda:	22 2e       	mov	r2, r18
     fdc:	f3 2d       	mov	r31, r3
     fde:	f0 62       	ori	r31, 0x20	; 32
     fe0:	3f 2e       	mov	r3, r31
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <vfprintf+0xe6>
     fe4:	8c 36       	cpi	r24, 0x6C	; 108
     fe6:	21 f4       	brne	.+8      	; 0xff0 <vfprintf+0xe2>
     fe8:	83 2d       	mov	r24, r3
     fea:	80 68       	ori	r24, 0x80	; 128
     fec:	38 2e       	mov	r3, r24
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0xe6>
     ff0:	88 36       	cpi	r24, 0x68	; 104
     ff2:	41 f4       	brne	.+16     	; 0x1004 <vfprintf+0xf6>
     ff4:	f7 01       	movw	r30, r14
     ff6:	93 fd       	sbrc	r25, 3
     ff8:	85 91       	lpm	r24, Z+
     ffa:	93 ff       	sbrs	r25, 3
     ffc:	81 91       	ld	r24, Z+
     ffe:	7f 01       	movw	r14, r30
    1000:	81 11       	cpse	r24, r1
    1002:	b3 cf       	rjmp	.-154    	; 0xf6a <vfprintf+0x5c>
    1004:	98 2f       	mov	r25, r24
    1006:	9f 7d       	andi	r25, 0xDF	; 223
    1008:	95 54       	subi	r25, 0x45	; 69
    100a:	93 30       	cpi	r25, 0x03	; 3
    100c:	28 f4       	brcc	.+10     	; 0x1018 <vfprintf+0x10a>
    100e:	0c 5f       	subi	r16, 0xFC	; 252
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	9f e3       	ldi	r25, 0x3F	; 63
    1014:	99 83       	std	Y+1, r25	; 0x01
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <vfprintf+0x124>
    1018:	83 36       	cpi	r24, 0x63	; 99
    101a:	31 f0       	breq	.+12     	; 0x1028 <vfprintf+0x11a>
    101c:	83 37       	cpi	r24, 0x73	; 115
    101e:	71 f0       	breq	.+28     	; 0x103c <vfprintf+0x12e>
    1020:	83 35       	cpi	r24, 0x53	; 83
    1022:	09 f0       	breq	.+2      	; 0x1026 <vfprintf+0x118>
    1024:	59 c0       	rjmp	.+178    	; 0x10d8 <vfprintf+0x1ca>
    1026:	21 c0       	rjmp	.+66     	; 0x106a <vfprintf+0x15c>
    1028:	f8 01       	movw	r30, r16
    102a:	80 81       	ld	r24, Z
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	0e 5f       	subi	r16, 0xFE	; 254
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	88 24       	eor	r8, r8
    1034:	83 94       	inc	r8
    1036:	91 2c       	mov	r9, r1
    1038:	53 01       	movw	r10, r6
    103a:	13 c0       	rjmp	.+38     	; 0x1062 <vfprintf+0x154>
    103c:	28 01       	movw	r4, r16
    103e:	f2 e0       	ldi	r31, 0x02	; 2
    1040:	4f 0e       	add	r4, r31
    1042:	51 1c       	adc	r5, r1
    1044:	f8 01       	movw	r30, r16
    1046:	a0 80       	ld	r10, Z
    1048:	b1 80       	ldd	r11, Z+1	; 0x01
    104a:	36 fe       	sbrs	r3, 6
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <vfprintf+0x146>
    104e:	69 2d       	mov	r22, r9
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <vfprintf+0x14a>
    1054:	6f ef       	ldi	r22, 0xFF	; 255
    1056:	7f ef       	ldi	r23, 0xFF	; 255
    1058:	c5 01       	movw	r24, r10
    105a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <strnlen>
    105e:	4c 01       	movw	r8, r24
    1060:	82 01       	movw	r16, r4
    1062:	f3 2d       	mov	r31, r3
    1064:	ff 77       	andi	r31, 0x7F	; 127
    1066:	3f 2e       	mov	r3, r31
    1068:	16 c0       	rjmp	.+44     	; 0x1096 <vfprintf+0x188>
    106a:	28 01       	movw	r4, r16
    106c:	22 e0       	ldi	r18, 0x02	; 2
    106e:	42 0e       	add	r4, r18
    1070:	51 1c       	adc	r5, r1
    1072:	f8 01       	movw	r30, r16
    1074:	a0 80       	ld	r10, Z
    1076:	b1 80       	ldd	r11, Z+1	; 0x01
    1078:	36 fe       	sbrs	r3, 6
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <vfprintf+0x174>
    107c:	69 2d       	mov	r22, r9
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x178>
    1082:	6f ef       	ldi	r22, 0xFF	; 255
    1084:	7f ef       	ldi	r23, 0xFF	; 255
    1086:	c5 01       	movw	r24, r10
    1088:	0e 94 68 09 	call	0x12d0	; 0x12d0 <strnlen_P>
    108c:	4c 01       	movw	r8, r24
    108e:	f3 2d       	mov	r31, r3
    1090:	f0 68       	ori	r31, 0x80	; 128
    1092:	3f 2e       	mov	r3, r31
    1094:	82 01       	movw	r16, r4
    1096:	33 fc       	sbrc	r3, 3
    1098:	1b c0       	rjmp	.+54     	; 0x10d0 <vfprintf+0x1c2>
    109a:	82 2d       	mov	r24, r2
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	88 16       	cp	r8, r24
    10a0:	99 06       	cpc	r9, r25
    10a2:	b0 f4       	brcc	.+44     	; 0x10d0 <vfprintf+0x1c2>
    10a4:	b6 01       	movw	r22, r12
    10a6:	80 e2       	ldi	r24, 0x20	; 32
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    10ae:	2a 94       	dec	r2
    10b0:	f4 cf       	rjmp	.-24     	; 0x109a <vfprintf+0x18c>
    10b2:	f5 01       	movw	r30, r10
    10b4:	37 fc       	sbrc	r3, 7
    10b6:	85 91       	lpm	r24, Z+
    10b8:	37 fe       	sbrs	r3, 7
    10ba:	81 91       	ld	r24, Z+
    10bc:	5f 01       	movw	r10, r30
    10be:	b6 01       	movw	r22, r12
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    10c6:	21 10       	cpse	r2, r1
    10c8:	2a 94       	dec	r2
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	82 1a       	sub	r8, r18
    10ce:	91 08       	sbc	r9, r1
    10d0:	81 14       	cp	r8, r1
    10d2:	91 04       	cpc	r9, r1
    10d4:	71 f7       	brne	.-36     	; 0x10b2 <vfprintf+0x1a4>
    10d6:	e8 c0       	rjmp	.+464    	; 0x12a8 <vfprintf+0x39a>
    10d8:	84 36       	cpi	r24, 0x64	; 100
    10da:	11 f0       	breq	.+4      	; 0x10e0 <vfprintf+0x1d2>
    10dc:	89 36       	cpi	r24, 0x69	; 105
    10de:	41 f5       	brne	.+80     	; 0x1130 <vfprintf+0x222>
    10e0:	f8 01       	movw	r30, r16
    10e2:	37 fe       	sbrs	r3, 7
    10e4:	07 c0       	rjmp	.+14     	; 0x10f4 <vfprintf+0x1e6>
    10e6:	60 81       	ld	r22, Z
    10e8:	71 81       	ldd	r23, Z+1	; 0x01
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	0c 5f       	subi	r16, 0xFC	; 252
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <vfprintf+0x1f6>
    10f4:	60 81       	ld	r22, Z
    10f6:	71 81       	ldd	r23, Z+1	; 0x01
    10f8:	07 2e       	mov	r0, r23
    10fa:	00 0c       	add	r0, r0
    10fc:	88 0b       	sbc	r24, r24
    10fe:	99 0b       	sbc	r25, r25
    1100:	0e 5f       	subi	r16, 0xFE	; 254
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	f3 2d       	mov	r31, r3
    1106:	ff 76       	andi	r31, 0x6F	; 111
    1108:	3f 2e       	mov	r3, r31
    110a:	97 ff       	sbrs	r25, 7
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <vfprintf+0x212>
    110e:	90 95       	com	r25
    1110:	80 95       	com	r24
    1112:	70 95       	com	r23
    1114:	61 95       	neg	r22
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	8f 4f       	sbci	r24, 0xFF	; 255
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	f0 68       	ori	r31, 0x80	; 128
    111e:	3f 2e       	mov	r3, r31
    1120:	2a e0       	ldi	r18, 0x0A	; 10
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	a3 01       	movw	r20, r6
    1126:	0e 94 ba 09 	call	0x1374	; 0x1374 <__ultoa_invert>
    112a:	88 2e       	mov	r8, r24
    112c:	86 18       	sub	r8, r6
    112e:	45 c0       	rjmp	.+138    	; 0x11ba <vfprintf+0x2ac>
    1130:	85 37       	cpi	r24, 0x75	; 117
    1132:	31 f4       	brne	.+12     	; 0x1140 <vfprintf+0x232>
    1134:	23 2d       	mov	r18, r3
    1136:	2f 7e       	andi	r18, 0xEF	; 239
    1138:	b2 2e       	mov	r11, r18
    113a:	2a e0       	ldi	r18, 0x0A	; 10
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	25 c0       	rjmp	.+74     	; 0x118a <vfprintf+0x27c>
    1140:	93 2d       	mov	r25, r3
    1142:	99 7f       	andi	r25, 0xF9	; 249
    1144:	b9 2e       	mov	r11, r25
    1146:	8f 36       	cpi	r24, 0x6F	; 111
    1148:	c1 f0       	breq	.+48     	; 0x117a <vfprintf+0x26c>
    114a:	18 f4       	brcc	.+6      	; 0x1152 <vfprintf+0x244>
    114c:	88 35       	cpi	r24, 0x58	; 88
    114e:	79 f0       	breq	.+30     	; 0x116e <vfprintf+0x260>
    1150:	b5 c0       	rjmp	.+362    	; 0x12bc <vfprintf+0x3ae>
    1152:	80 37       	cpi	r24, 0x70	; 112
    1154:	19 f0       	breq	.+6      	; 0x115c <vfprintf+0x24e>
    1156:	88 37       	cpi	r24, 0x78	; 120
    1158:	21 f0       	breq	.+8      	; 0x1162 <vfprintf+0x254>
    115a:	b0 c0       	rjmp	.+352    	; 0x12bc <vfprintf+0x3ae>
    115c:	e9 2f       	mov	r30, r25
    115e:	e0 61       	ori	r30, 0x10	; 16
    1160:	be 2e       	mov	r11, r30
    1162:	b4 fe       	sbrs	r11, 4
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <vfprintf+0x272>
    1166:	fb 2d       	mov	r31, r11
    1168:	f4 60       	ori	r31, 0x04	; 4
    116a:	bf 2e       	mov	r11, r31
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <vfprintf+0x272>
    116e:	34 fe       	sbrs	r3, 4
    1170:	0a c0       	rjmp	.+20     	; 0x1186 <vfprintf+0x278>
    1172:	29 2f       	mov	r18, r25
    1174:	26 60       	ori	r18, 0x06	; 6
    1176:	b2 2e       	mov	r11, r18
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x278>
    117a:	28 e0       	ldi	r18, 0x08	; 8
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	05 c0       	rjmp	.+10     	; 0x118a <vfprintf+0x27c>
    1180:	20 e1       	ldi	r18, 0x10	; 16
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x27c>
    1186:	20 e1       	ldi	r18, 0x10	; 16
    1188:	32 e0       	ldi	r19, 0x02	; 2
    118a:	f8 01       	movw	r30, r16
    118c:	b7 fe       	sbrs	r11, 7
    118e:	07 c0       	rjmp	.+14     	; 0x119e <vfprintf+0x290>
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	0c 5f       	subi	r16, 0xFC	; 252
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <vfprintf+0x29c>
    119e:	60 81       	ld	r22, Z
    11a0:	71 81       	ldd	r23, Z+1	; 0x01
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 5f       	subi	r16, 0xFE	; 254
    11a8:	1f 4f       	sbci	r17, 0xFF	; 255
    11aa:	a3 01       	movw	r20, r6
    11ac:	0e 94 ba 09 	call	0x1374	; 0x1374 <__ultoa_invert>
    11b0:	88 2e       	mov	r8, r24
    11b2:	86 18       	sub	r8, r6
    11b4:	fb 2d       	mov	r31, r11
    11b6:	ff 77       	andi	r31, 0x7F	; 127
    11b8:	3f 2e       	mov	r3, r31
    11ba:	36 fe       	sbrs	r3, 6
    11bc:	0d c0       	rjmp	.+26     	; 0x11d8 <vfprintf+0x2ca>
    11be:	23 2d       	mov	r18, r3
    11c0:	2e 7f       	andi	r18, 0xFE	; 254
    11c2:	a2 2e       	mov	r10, r18
    11c4:	89 14       	cp	r8, r9
    11c6:	58 f4       	brcc	.+22     	; 0x11de <vfprintf+0x2d0>
    11c8:	34 fe       	sbrs	r3, 4
    11ca:	0b c0       	rjmp	.+22     	; 0x11e2 <vfprintf+0x2d4>
    11cc:	32 fc       	sbrc	r3, 2
    11ce:	09 c0       	rjmp	.+18     	; 0x11e2 <vfprintf+0x2d4>
    11d0:	83 2d       	mov	r24, r3
    11d2:	8e 7e       	andi	r24, 0xEE	; 238
    11d4:	a8 2e       	mov	r10, r24
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <vfprintf+0x2d4>
    11d8:	b8 2c       	mov	r11, r8
    11da:	a3 2c       	mov	r10, r3
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <vfprintf+0x2d6>
    11de:	b8 2c       	mov	r11, r8
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <vfprintf+0x2d6>
    11e2:	b9 2c       	mov	r11, r9
    11e4:	a4 fe       	sbrs	r10, 4
    11e6:	0f c0       	rjmp	.+30     	; 0x1206 <vfprintf+0x2f8>
    11e8:	fe 01       	movw	r30, r28
    11ea:	e8 0d       	add	r30, r8
    11ec:	f1 1d       	adc	r31, r1
    11ee:	80 81       	ld	r24, Z
    11f0:	80 33       	cpi	r24, 0x30	; 48
    11f2:	21 f4       	brne	.+8      	; 0x11fc <vfprintf+0x2ee>
    11f4:	9a 2d       	mov	r25, r10
    11f6:	99 7e       	andi	r25, 0xE9	; 233
    11f8:	a9 2e       	mov	r10, r25
    11fa:	09 c0       	rjmp	.+18     	; 0x120e <vfprintf+0x300>
    11fc:	a2 fe       	sbrs	r10, 2
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <vfprintf+0x2fe>
    1200:	b3 94       	inc	r11
    1202:	b3 94       	inc	r11
    1204:	04 c0       	rjmp	.+8      	; 0x120e <vfprintf+0x300>
    1206:	8a 2d       	mov	r24, r10
    1208:	86 78       	andi	r24, 0x86	; 134
    120a:	09 f0       	breq	.+2      	; 0x120e <vfprintf+0x300>
    120c:	b3 94       	inc	r11
    120e:	a3 fc       	sbrc	r10, 3
    1210:	11 c0       	rjmp	.+34     	; 0x1234 <vfprintf+0x326>
    1212:	a0 fe       	sbrs	r10, 0
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <vfprintf+0x314>
    1216:	b2 14       	cp	r11, r2
    1218:	88 f4       	brcc	.+34     	; 0x123c <vfprintf+0x32e>
    121a:	28 0c       	add	r2, r8
    121c:	92 2c       	mov	r9, r2
    121e:	9b 18       	sub	r9, r11
    1220:	0e c0       	rjmp	.+28     	; 0x123e <vfprintf+0x330>
    1222:	b2 14       	cp	r11, r2
    1224:	60 f4       	brcc	.+24     	; 0x123e <vfprintf+0x330>
    1226:	b6 01       	movw	r22, r12
    1228:	80 e2       	ldi	r24, 0x20	; 32
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    1230:	b3 94       	inc	r11
    1232:	f7 cf       	rjmp	.-18     	; 0x1222 <vfprintf+0x314>
    1234:	b2 14       	cp	r11, r2
    1236:	18 f4       	brcc	.+6      	; 0x123e <vfprintf+0x330>
    1238:	2b 18       	sub	r2, r11
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0x332>
    123c:	98 2c       	mov	r9, r8
    123e:	21 2c       	mov	r2, r1
    1240:	a4 fe       	sbrs	r10, 4
    1242:	10 c0       	rjmp	.+32     	; 0x1264 <vfprintf+0x356>
    1244:	b6 01       	movw	r22, r12
    1246:	80 e3       	ldi	r24, 0x30	; 48
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    124e:	a2 fe       	sbrs	r10, 2
    1250:	17 c0       	rjmp	.+46     	; 0x1280 <vfprintf+0x372>
    1252:	a1 fc       	sbrc	r10, 1
    1254:	03 c0       	rjmp	.+6      	; 0x125c <vfprintf+0x34e>
    1256:	88 e7       	ldi	r24, 0x78	; 120
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <vfprintf+0x352>
    125c:	88 e5       	ldi	r24, 0x58	; 88
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	b6 01       	movw	r22, r12
    1262:	0c c0       	rjmp	.+24     	; 0x127c <vfprintf+0x36e>
    1264:	8a 2d       	mov	r24, r10
    1266:	86 78       	andi	r24, 0x86	; 134
    1268:	59 f0       	breq	.+22     	; 0x1280 <vfprintf+0x372>
    126a:	a1 fe       	sbrs	r10, 1
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x364>
    126e:	8b e2       	ldi	r24, 0x2B	; 43
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <vfprintf+0x366>
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	a7 fc       	sbrc	r10, 7
    1276:	8d e2       	ldi	r24, 0x2D	; 45
    1278:	b6 01       	movw	r22, r12
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    1280:	89 14       	cp	r8, r9
    1282:	38 f4       	brcc	.+14     	; 0x1292 <vfprintf+0x384>
    1284:	b6 01       	movw	r22, r12
    1286:	80 e3       	ldi	r24, 0x30	; 48
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    128e:	9a 94       	dec	r9
    1290:	f7 cf       	rjmp	.-18     	; 0x1280 <vfprintf+0x372>
    1292:	8a 94       	dec	r8
    1294:	f3 01       	movw	r30, r6
    1296:	e8 0d       	add	r30, r8
    1298:	f1 1d       	adc	r31, r1
    129a:	80 81       	ld	r24, Z
    129c:	b6 01       	movw	r22, r12
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    12a4:	81 10       	cpse	r8, r1
    12a6:	f5 cf       	rjmp	.-22     	; 0x1292 <vfprintf+0x384>
    12a8:	22 20       	and	r2, r2
    12aa:	09 f4       	brne	.+2      	; 0x12ae <vfprintf+0x3a0>
    12ac:	42 ce       	rjmp	.-892    	; 0xf32 <vfprintf+0x24>
    12ae:	b6 01       	movw	r22, r12
    12b0:	80 e2       	ldi	r24, 0x20	; 32
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <fputc>
    12b8:	2a 94       	dec	r2
    12ba:	f6 cf       	rjmp	.-20     	; 0x12a8 <vfprintf+0x39a>
    12bc:	f6 01       	movw	r30, r12
    12be:	86 81       	ldd	r24, Z+6	; 0x06
    12c0:	97 81       	ldd	r25, Z+7	; 0x07
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <vfprintf+0x3ba>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	9f ef       	ldi	r25, 0xFF	; 255
    12c8:	2b 96       	adiw	r28, 0x0b	; 11
    12ca:	e2 e1       	ldi	r30, 0x12	; 18
    12cc:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__epilogue_restores__>

000012d0 <strnlen_P>:
    12d0:	fc 01       	movw	r30, r24
    12d2:	05 90       	lpm	r0, Z+
    12d4:	61 50       	subi	r22, 0x01	; 1
    12d6:	70 40       	sbci	r23, 0x00	; 0
    12d8:	01 10       	cpse	r0, r1
    12da:	d8 f7       	brcc	.-10     	; 0x12d2 <strnlen_P+0x2>
    12dc:	80 95       	com	r24
    12de:	90 95       	com	r25
    12e0:	8e 0f       	add	r24, r30
    12e2:	9f 1f       	adc	r25, r31
    12e4:	08 95       	ret

000012e6 <strnlen>:
    12e6:	fc 01       	movw	r30, r24
    12e8:	61 50       	subi	r22, 0x01	; 1
    12ea:	70 40       	sbci	r23, 0x00	; 0
    12ec:	01 90       	ld	r0, Z+
    12ee:	01 10       	cpse	r0, r1
    12f0:	d8 f7       	brcc	.-10     	; 0x12e8 <strnlen+0x2>
    12f2:	80 95       	com	r24
    12f4:	90 95       	com	r25
    12f6:	8e 0f       	add	r24, r30
    12f8:	9f 1f       	adc	r25, r31
    12fa:	08 95       	ret

000012fc <fputc>:
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	fb 01       	movw	r30, r22
    1306:	23 81       	ldd	r18, Z+3	; 0x03
    1308:	21 fd       	sbrc	r18, 1
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <fputc+0x16>
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	9f ef       	ldi	r25, 0xFF	; 255
    1310:	2c c0       	rjmp	.+88     	; 0x136a <fputc+0x6e>
    1312:	22 ff       	sbrs	r18, 2
    1314:	16 c0       	rjmp	.+44     	; 0x1342 <fputc+0x46>
    1316:	46 81       	ldd	r20, Z+6	; 0x06
    1318:	57 81       	ldd	r21, Z+7	; 0x07
    131a:	24 81       	ldd	r18, Z+4	; 0x04
    131c:	35 81       	ldd	r19, Z+5	; 0x05
    131e:	42 17       	cp	r20, r18
    1320:	53 07       	cpc	r21, r19
    1322:	44 f4       	brge	.+16     	; 0x1334 <fputc+0x38>
    1324:	a0 81       	ld	r26, Z
    1326:	b1 81       	ldd	r27, Z+1	; 0x01
    1328:	9d 01       	movw	r18, r26
    132a:	2f 5f       	subi	r18, 0xFF	; 255
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	31 83       	std	Z+1, r19	; 0x01
    1330:	20 83       	st	Z, r18
    1332:	8c 93       	st	X, r24
    1334:	26 81       	ldd	r18, Z+6	; 0x06
    1336:	37 81       	ldd	r19, Z+7	; 0x07
    1338:	2f 5f       	subi	r18, 0xFF	; 255
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	37 83       	std	Z+7, r19	; 0x07
    133e:	26 83       	std	Z+6, r18	; 0x06
    1340:	14 c0       	rjmp	.+40     	; 0x136a <fputc+0x6e>
    1342:	8b 01       	movw	r16, r22
    1344:	ec 01       	movw	r28, r24
    1346:	fb 01       	movw	r30, r22
    1348:	00 84       	ldd	r0, Z+8	; 0x08
    134a:	f1 85       	ldd	r31, Z+9	; 0x09
    134c:	e0 2d       	mov	r30, r0
    134e:	09 95       	icall
    1350:	89 2b       	or	r24, r25
    1352:	e1 f6       	brne	.-72     	; 0x130c <fputc+0x10>
    1354:	d8 01       	movw	r26, r16
    1356:	16 96       	adiw	r26, 0x06	; 6
    1358:	8d 91       	ld	r24, X+
    135a:	9c 91       	ld	r25, X
    135c:	17 97       	sbiw	r26, 0x07	; 7
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	17 96       	adiw	r26, 0x07	; 7
    1362:	9c 93       	st	X, r25
    1364:	8e 93       	st	-X, r24
    1366:	16 97       	sbiw	r26, 0x06	; 6
    1368:	ce 01       	movw	r24, r28
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	08 95       	ret

00001374 <__ultoa_invert>:
    1374:	fa 01       	movw	r30, r20
    1376:	aa 27       	eor	r26, r26
    1378:	28 30       	cpi	r18, 0x08	; 8
    137a:	51 f1       	breq	.+84     	; 0x13d0 <__ultoa_invert+0x5c>
    137c:	20 31       	cpi	r18, 0x10	; 16
    137e:	81 f1       	breq	.+96     	; 0x13e0 <__ultoa_invert+0x6c>
    1380:	e8 94       	clt
    1382:	6f 93       	push	r22
    1384:	6e 7f       	andi	r22, 0xFE	; 254
    1386:	6e 5f       	subi	r22, 0xFE	; 254
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	af 4f       	sbci	r26, 0xFF	; 255
    1390:	b1 e0       	ldi	r27, 0x01	; 1
    1392:	3e d0       	rcall	.+124    	; 0x1410 <__ultoa_invert+0x9c>
    1394:	b4 e0       	ldi	r27, 0x04	; 4
    1396:	3c d0       	rcall	.+120    	; 0x1410 <__ultoa_invert+0x9c>
    1398:	67 0f       	add	r22, r23
    139a:	78 1f       	adc	r23, r24
    139c:	89 1f       	adc	r24, r25
    139e:	9a 1f       	adc	r25, r26
    13a0:	a1 1d       	adc	r26, r1
    13a2:	68 0f       	add	r22, r24
    13a4:	79 1f       	adc	r23, r25
    13a6:	8a 1f       	adc	r24, r26
    13a8:	91 1d       	adc	r25, r1
    13aa:	a1 1d       	adc	r26, r1
    13ac:	6a 0f       	add	r22, r26
    13ae:	71 1d       	adc	r23, r1
    13b0:	81 1d       	adc	r24, r1
    13b2:	91 1d       	adc	r25, r1
    13b4:	a1 1d       	adc	r26, r1
    13b6:	20 d0       	rcall	.+64     	; 0x13f8 <__ultoa_invert+0x84>
    13b8:	09 f4       	brne	.+2      	; 0x13bc <__ultoa_invert+0x48>
    13ba:	68 94       	set
    13bc:	3f 91       	pop	r19
    13be:	2a e0       	ldi	r18, 0x0A	; 10
    13c0:	26 9f       	mul	r18, r22
    13c2:	11 24       	eor	r1, r1
    13c4:	30 19       	sub	r19, r0
    13c6:	30 5d       	subi	r19, 0xD0	; 208
    13c8:	31 93       	st	Z+, r19
    13ca:	de f6       	brtc	.-74     	; 0x1382 <__ultoa_invert+0xe>
    13cc:	cf 01       	movw	r24, r30
    13ce:	08 95       	ret
    13d0:	46 2f       	mov	r20, r22
    13d2:	47 70       	andi	r20, 0x07	; 7
    13d4:	40 5d       	subi	r20, 0xD0	; 208
    13d6:	41 93       	st	Z+, r20
    13d8:	b3 e0       	ldi	r27, 0x03	; 3
    13da:	0f d0       	rcall	.+30     	; 0x13fa <__ultoa_invert+0x86>
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <__ultoa_invert+0x5c>
    13de:	f6 cf       	rjmp	.-20     	; 0x13cc <__ultoa_invert+0x58>
    13e0:	46 2f       	mov	r20, r22
    13e2:	4f 70       	andi	r20, 0x0F	; 15
    13e4:	40 5d       	subi	r20, 0xD0	; 208
    13e6:	4a 33       	cpi	r20, 0x3A	; 58
    13e8:	18 f0       	brcs	.+6      	; 0x13f0 <__ultoa_invert+0x7c>
    13ea:	49 5d       	subi	r20, 0xD9	; 217
    13ec:	31 fd       	sbrc	r19, 1
    13ee:	40 52       	subi	r20, 0x20	; 32
    13f0:	41 93       	st	Z+, r20
    13f2:	02 d0       	rcall	.+4      	; 0x13f8 <__ultoa_invert+0x84>
    13f4:	a9 f7       	brne	.-22     	; 0x13e0 <__ultoa_invert+0x6c>
    13f6:	ea cf       	rjmp	.-44     	; 0x13cc <__ultoa_invert+0x58>
    13f8:	b4 e0       	ldi	r27, 0x04	; 4
    13fa:	a6 95       	lsr	r26
    13fc:	97 95       	ror	r25
    13fe:	87 95       	ror	r24
    1400:	77 95       	ror	r23
    1402:	67 95       	ror	r22
    1404:	ba 95       	dec	r27
    1406:	c9 f7       	brne	.-14     	; 0x13fa <__ultoa_invert+0x86>
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	61 05       	cpc	r22, r1
    140c:	71 05       	cpc	r23, r1
    140e:	08 95       	ret
    1410:	9b 01       	movw	r18, r22
    1412:	ac 01       	movw	r20, r24
    1414:	0a 2e       	mov	r0, r26
    1416:	06 94       	lsr	r0
    1418:	57 95       	ror	r21
    141a:	47 95       	ror	r20
    141c:	37 95       	ror	r19
    141e:	27 95       	ror	r18
    1420:	ba 95       	dec	r27
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__ultoa_invert+0xa2>
    1424:	62 0f       	add	r22, r18
    1426:	73 1f       	adc	r23, r19
    1428:	84 1f       	adc	r24, r20
    142a:	95 1f       	adc	r25, r21
    142c:	a0 1d       	adc	r26, r0
    142e:	08 95       	ret

00001430 <__prologue_saves__>:
    1430:	2f 92       	push	r2
    1432:	3f 92       	push	r3
    1434:	4f 92       	push	r4
    1436:	5f 92       	push	r5
    1438:	6f 92       	push	r6
    143a:	7f 92       	push	r7
    143c:	8f 92       	push	r8
    143e:	9f 92       	push	r9
    1440:	af 92       	push	r10
    1442:	bf 92       	push	r11
    1444:	cf 92       	push	r12
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	ca 1b       	sub	r28, r26
    145a:	db 0b       	sbc	r29, r27
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	09 94       	ijmp

00001468 <__epilogue_restores__>:
    1468:	2a 88       	ldd	r2, Y+18	; 0x12
    146a:	39 88       	ldd	r3, Y+17	; 0x11
    146c:	48 88       	ldd	r4, Y+16	; 0x10
    146e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1470:	6e 84       	ldd	r6, Y+14	; 0x0e
    1472:	7d 84       	ldd	r7, Y+13	; 0x0d
    1474:	8c 84       	ldd	r8, Y+12	; 0x0c
    1476:	9b 84       	ldd	r9, Y+11	; 0x0b
    1478:	aa 84       	ldd	r10, Y+10	; 0x0a
    147a:	b9 84       	ldd	r11, Y+9	; 0x09
    147c:	c8 84       	ldd	r12, Y+8	; 0x08
    147e:	df 80       	ldd	r13, Y+7	; 0x07
    1480:	ee 80       	ldd	r14, Y+6	; 0x06
    1482:	fd 80       	ldd	r15, Y+5	; 0x05
    1484:	0c 81       	ldd	r16, Y+4	; 0x04
    1486:	1b 81       	ldd	r17, Y+3	; 0x03
    1488:	aa 81       	ldd	r26, Y+2	; 0x02
    148a:	b9 81       	ldd	r27, Y+1	; 0x01
    148c:	ce 0f       	add	r28, r30
    148e:	d1 1d       	adc	r29, r1
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	ed 01       	movw	r28, r26
    149c:	08 95       	ret

0000149e <_exit>:
    149e:	f8 94       	cli

000014a0 <__stop_program>:
    14a0:	ff cf       	rjmp	.-2      	; 0x14a0 <__stop_program>
